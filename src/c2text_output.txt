📁 src
  📄 app.config.ts
  📄 app.scss
  📄 app.ts
  📁 components
    📁 case-detail-modal
      📄 index.tsx
    📁 faq-section
      📄 index.scss
      📄 index.tsx
    📁 search-bar
      📄 index.scss
      📄 index.tsx
    📁 service-card
      📄 index.scss
      📄 index.tsx
    📁 tab-bar
      📄 index.scss
      📄 index.tsx
  📁 config
    📄 index.ts
  📄 index.html
  📁 pages
    📁 index
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx
    📁 project
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx
  📁 styles
    📄 custom-theme.scss

===== File: app.config.ts =====
// app.config.ts
export default defineAppConfig({
  pages: [
    'pages/index/index',
    'pages/project/index',
    'pages/cases/index',
    'pages/contact/index'
  ],
  window: {
    backgroundTextStyle: 'light',
    navigationBarBackgroundColor: '#ffffff',
    navigationBarTitleText: '防水服务',
    navigationBarTextStyle: 'black',
    backgroundColor: '#f6f6f6'
  },
  tabBar: {
    color: '#999999',
    selectedColor: '#2563eb',
    backgroundColor: '#ffffff',
    borderStyle: 'white',
    list: [
      {
        pagePath: 'pages/index/index',
        text: '首页',
        iconPath: 'assets/tab-bar/home.png',
        selectedIconPath: 'assets/tab-bar/home-active.png'
      },
      {
        pagePath: 'pages/project/index',
        text: '服务',
        iconPath: 'assets/tab-bar/service.png',
        selectedIconPath: 'assets/tab-bar/service-active.png'
      },
      {
        pagePath: 'pages/cases/index',
        text: '案例',
        iconPath: 'assets/tab-bar/case.png',
        selectedIconPath: 'assets/tab-bar/case-active.png'
      },
      {
        pagePath: 'pages/contact/index',
        text: '联系我们',
        iconPath: 'assets/tab-bar/contact.png',
        selectedIconPath: 'assets/tab-bar/contact-active.png'
      }
    ]
  }
})
===== End of File: app.config.ts =====


===== File: app.scss =====
// app.scss
@import "./styles/custom-theme.scss";

// 基础样式设置
page {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  font-size: 28px;
  line-height: 1.5;
  background: $color-bg;
  color: $color-text-base;
}
===== End of File: app.scss =====


===== File: app.ts =====
// app.tsx
import { PropsWithChildren } from 'react'
import { useLaunch, useError, getStorageSync, setStorageSync, onNetworkStatusChange } from '@tarojs/taro'
import './styles/custom-theme.scss'
import './app.scss'

function App({ children }: PropsWithChildren<any>) {
  useLaunch(() => {
    initApp()
  })

  useError((error) => {
    console.error('App Error:', error)
  })

  const initApp = async () => {
    try {
      // 初始化日志
      const logs = getStorageSync('logs') || []
      logs.unshift(Date.now())
      setStorageSync('logs', logs)

      // 网络状态监听
      onNetworkStatusChange((res) => {
        console.log('network status:', res.isConnected)
      })

    } catch (error) {
      console.error('App initialization failed:', error)
    }
  }

  return children
}

export default App
===== End of File: app.ts =====


===== File: components\case-detail-modal\index.tsx =====
import { memo } from 'react'
import { View, Text, Image, Button } from '@tarojs/components'
import { AtModal, AtModalHeader, AtModalContent, AtModalAction } from 'taro-ui'
import type { ServiceCase } from '../../types'

interface CaseDetailModalProps {
  isOpen: boolean
  onClose: () => void
  data: ServiceCase | null
}

export const CaseDetailModal = memo(function CaseDetailModal({
  isOpen,
  onClose,
  data
}: CaseDetailModalProps) {
  if (!data) return null

  return (
    <AtModal
      isOpened={isOpen}
      onClose={onClose}
    >
      <AtModalHeader>{data.title}</AtModalHeader>
      <AtModalContent>
        <View className='case-detail'>
          <Image
            src={data.imageUrl}
            mode='aspectFill'
            className='case-detail__image'
            lazyLoad
          />
          <View className='case-detail__content'>
            <Text className='case-detail__desc'>{data.description}</Text>
            {data.content && (
              <View className='case-detail__full-content'>{data.content}</View>
            )}
            <View className='case-detail__meta'>
              <Text className='case-detail__type'>类型：{data.type}</Text>
              <Text className='case-detail__date'>日期：{data.date}</Text>
              <Text className='case-detail__views'>浏览：{data.views}</Text>
            </View>
          </View>
        </View>
      </AtModalContent>
      <AtModalAction>
        <Button onClick={onClose}>关闭</Button>
      </AtModalAction>
    </AtModal>
  )
})
===== End of File: components\case-detail-modal\index.tsx =====


===== File: components\faq-section\index.scss =====
@import "../../styles/custom-theme.scss";

.faq-section {
  position: relative;
  background: $color-bg-base;
  border-radius: 12px;
  padding: 24px 20px 12px;
  
  &__title {
    font-size: 32px;
    font-weight: 600;
    color: $color-text-title;
    margin-bottom: 8px;
  }

  &__list {
    display: flex;
    flex-direction: column;
  }
}

.faq-item {
  transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
  
  & + & {
    border-top: 1px solid rgba($color-border-base, 0.5);
  }
  
  &__header {
    padding: 16px 0;
    cursor: pointer;
    position: relative;
    user-select: none;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);

    &:hover {
      .faq-item__question {
        color: $color-brand;
      }
      
      .faq-item__arrow {
        border-color: $color-brand;
        transform: translateY(-50%) rotate(60deg);
      }
    }

    &:active {
      .faq-item__question {
        opacity: 0.7;
      }
    }
  }

  &__main {
    padding-right: 36px;
  }

  &__question {
    font-size: 28px;
    font-weight: 500;
    color: $color-text-title;
    line-height: 1.5;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
  }

  &__category {
    display: inline-block;
    margin-top: 8px;
    padding: 4px 12px;
    font-size: 24px;
    color: $color-brand;
    background: rgba($color-brand, 0.08);
    border-radius: 6px;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);

    &:hover {
      background: rgba($color-brand, 0.12);
    }
  }

  &__arrow {
    position: absolute;
    right: 2px;
    top: 50%;
    width: 12px;
    height: 12px;
    border-right: 2px solid rgba($color-text-title, 0.4);
    border-bottom: 2px solid rgba($color-text-title, 0.4);
    transform: translateY(-50%) rotate(45deg);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
  }

  &__content {
    position: relative;
    overflow: hidden;
    opacity: 0;
    max-height: 0;
    transform: translateY(-12px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: max-height, opacity, transform;
  }

  &__answer {
    padding: 0 0 16px;
    font-size: 26px;
    line-height: 1.6;
    color: rgba($color-text-secondary, 0.85);
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
  }

  &--active {
    background: rgba($color-brand, 0.02);

    .faq-item__header {
      padding-bottom: 12px;
    }

    .faq-item__arrow {
      transform: translateY(-50%) rotate(-135deg);
      border-color: $color-brand;
    }

    .faq-item__question {
      color: $color-brand;
      font-weight: 600;
    }

    .faq-item__content {
      opacity: 1;
      max-height: 1000px;
      transform: translateY(0);
    }

    .faq-item__category {
      background: rgba($color-brand, 0.12);
      color: darken($color-brand, 5%);
    }
  }
}

@media (max-width: 375px) {
  .faq-section {
    padding: 20px 16px 8px;
    
    &__title {
      font-size: 28px;
      margin-bottom: 4px;
    }
  }

  .faq-item {
    &__header {
      padding: 14px 0;
    }

    &__question {
      font-size: 26px;
    }

    &__category {
      font-size: 22px;
      padding: 3px 10px;
      margin-top: 6px;
    }

    &__answer {
      font-size: 24px;
      padding: 0 0 14px;
    }

    &__arrow {
      width: 10px;
      height: 10px;
    }

    &--active {
      .faq-item__header {
        padding-bottom: 10px;
      }
    }
  }
}
===== End of File: components\faq-section\index.scss =====


===== File: components\faq-section\index.tsx =====
// components/faq-section/index.tsx
import { useState, useCallback, memo } from 'react'
import { View, Text } from '@tarojs/components'
import type { FAQ } from '../../types'
import './index.scss'

interface FAQItemProps {
  faq: FAQ
  isOpen: boolean
  onToggle: (id: number) => void
}

const FAQItem = memo(({ faq, isOpen, onToggle }: FAQItemProps) => {
  const handleClick = useCallback(() => {
    onToggle(faq.id)
  }, [faq.id, onToggle])

  return (
    <View className={`faq-item ${isOpen ? 'faq-item--active' : ''}`}>
      <View className='faq-item__header' onClick={handleClick}>
        <View className='faq-item__main'>
          <Text className='faq-item__question'>{faq.question}</Text>
          {faq.category && (
            <Text className='faq-item__category'>{faq.category}</Text>
          )}
        </View>
        <View className='faq-item__arrow' />
      </View>

      <View className='faq-item__content'>
        <Text className='faq-item__answer'>{faq.answer}</Text>
      </View>
    </View>
  )
})

interface FAQSectionProps {
  faqs: FAQ[]
  title?: string
  className?: string
  defaultOpenIds?: number[]
  onFAQOpen?: (id: number) => void
  onFAQClose?: (id: number) => void
}

export const FAQSection = memo(({
  faqs,
  title = '常见问题',
  className = '',
  defaultOpenIds = [],
  onFAQOpen,
  onFAQClose
}: FAQSectionProps) => {
  const [openFAQs, setOpenFAQs] = useState<Set<number>>(() => 
    new Set(defaultOpenIds)
  )

  const handleToggle = useCallback((id: number) => {
    setOpenFAQs(prev => {
      const newOpenFAQs = new Set(prev)
      if (newOpenFAQs.has(id)) {
        newOpenFAQs.delete(id)
        onFAQClose?.(id)
      } else {
        newOpenFAQs.add(id)
        onFAQOpen?.(id)
      }
      return newOpenFAQs
    })
  }, [onFAQOpen, onFAQClose])

  if (!faqs?.length) return null

  return (
    <View className={`faq-section ${className}`}>
      <Text className='faq-section__title'>{title}</Text>
      <View className='faq-section__list'>
        {faqs.map(faq => (
          <FAQItem
            key={faq.id}
            faq={faq}
            isOpen={openFAQs.has(faq.id)}
            onToggle={handleToggle}
          />
        ))}
      </View>
    </View>
  )
})

export default FAQSection
===== End of File: components\faq-section\index.tsx =====


===== File: components\search-bar\index.scss =====
@import "../../styles/custom-theme.scss";

.search-bar {
  position: relative;
  z-index: 1;
  height: 88px;
  background: $color-bg-base;
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 12px 24px;

  &__input-wrap {
    flex: 1;
    height: 64px;
    background: $color-grey-6;
    border-radius: 32px;
    padding: 0 20px;
    display: flex;
    align-items: center;
    position: relative;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);

    &:hover {
      background: mix($color-grey-6, $color-grey-5, 70%);
    }

    &:active {
      background: $color-grey-5;
    }
  }

  &__icon {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.6;
    transition: opacity 0.25s ease;
  }

  &__circle {
    position: absolute;
    width: 16px;
    height: 16px;
    border: 2px solid $color-grey-2;
    border-radius: 50%;
    transition: all 0.25s ease;
  }

  &__line {
    position: absolute;
    width: 10px;
    height: 2px;
    background: $color-grey-2;
    transform: rotate(45deg);
    transform-origin: 0 50%;
    margin: 14px 0 0 13px;
    transition: all 0.25s ease;
  }

  &__loading {
    width: 20px;
    height: 20px;
    border: 2px solid rgba($color-brand, 0.3);
    border-top-color: $color-brand;
    border-radius: 50%;
    animation: search-loading 0.8s cubic-bezier(0.4, 0, 0.2, 1) infinite;
  }

  &__input {
    flex: 1;
    height: 100%;
    font-size: 28px;
    background: transparent;
    padding: 0 12px;
    color: $color-text-base;
    transition: all 0.25s ease;

    &:focus {
      & + .search-bar__icon {
        opacity: 0.8;

        .search-bar__circle {
          border-color: $color-brand;
        }

        .search-bar__line {
          background: $color-brand;
        }
      }
    }
  }

  &__placeholder {
    color: $color-text-placeholder;
    transition: color 0.25s ease;
  }

  &__clear {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.7;
    cursor: pointer;
    transition: all 0.25s ease;

    &:hover {
      opacity: 0.9;
    }

    &:active {
      opacity: 0.5;
      transform: scale(0.95);
    }
  }

  &__clear-icon {
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background: $color-grey-3;
    position: relative;
    transition: all 0.25s ease;

    &:hover {
      background: $color-grey-2;
    }

    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 14px;
      height: 2px;
      background: $color-white;
      transition: transform 0.25s ease;
    }

    &::before {
      transform: translate(-50%, -50%) rotate(45deg);
    }

    &::after {
      transform: translate(-50%, -50%) rotate(-45deg);
    }
  }

  &__action {
    font-size: 28px;
    font-weight: 500;
    color: $color-text-secondary;
    padding: 0 12px;
    height: 64px;
    line-height: 64px;
    cursor: pointer;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    user-select: none;

    &:hover {
      color: mix($color-brand, $color-text-secondary, 70%);
    }

    &:active {
      color: mix($color-brand, $color-text-secondary, 85%);
      transform: scale(0.98);
    }

    &--active {
      color: $color-brand;
      font-weight: 600;
    }

    &--disabled {
      opacity: 0.5;
      pointer-events: none;
      cursor: not-allowed;
    }
  }
}

@keyframes search-loading {
  to {
    transform: rotate(360deg);
  }
}

@media (max-width: 375px) {
  .search-bar {
    height: 80px;
    padding: 10px 20px;
    gap: 12px;

    &__input-wrap {
      height: 56px;
      padding: 0 16px;
    }

    &__icon {
      width: 36px;
      height: 36px;
    }

    &__circle {
      width: 14px;
      height: 14px;
    }

    &__line {
      width: 9px;
      margin: 12px 0 0 11px;
    }

    &__input {
      font-size: 26px;
      padding: 0 10px;
    }

    &__clear {
      width: 36px;
      height: 36px;
    }

    &__clear-icon {
      width: 24px;
      height: 24px;

      &::before,
      &::after {
        width: 12px;
      }
    }

    &__action {
      font-size: 26px;
      height: 56px;
      line-height: 56px;
      padding: 0 10px;
    }
  }
}
===== End of File: components\search-bar\index.scss =====


===== File: components\search-bar\index.tsx =====
// components/search-bar/index.tsx
import { useState, useCallback, memo } from 'react'
import { View, Input } from '@tarojs/components'
import { SearchBarProps } from '../../types'
import './index.scss'

export const SearchBar = memo(({
  value,
  placeholder = '搜索',
  loading = false,
  className = '',
  onChange,
  onSearch,
  onFocus,
  onBlur,
  onClear
}: SearchBarProps) => {
  const [isFocused, setIsFocused] = useState(false)

  const handleInput = useCallback((e: any) => {
    onChange(e.detail.value)
  }, [onChange])

  const handleClear = useCallback(() => {
    onChange('')
    onClear?.()
  }, [onChange, onClear])

  const handleSearch = useCallback(() => {
    if (!value.trim()) return
    onSearch?.(value)
  }, [value, onSearch])

  const handleFocus = useCallback(() => {
    setIsFocused(true)
    onFocus?.()
  }, [onFocus])

  const handleBlur = useCallback(() => {
    setIsFocused(false)
    onBlur?.()
  }, [onBlur])

  return (
    <View className={`search-bar ${isFocused ? 'search-bar--focused' : ''} ${loading ? 'search-bar--loading' : ''} ${className}`}>
      <View className='search-bar__input-wrap'>
        <View className='search-bar__icon'>
          {loading ? (
            <View className='search-bar__loading' />
          ) : (
            <>
              <View className='search-bar__circle' />
              <View className='search-bar__line' />
            </>
          )}
        </View>

        <Input
          className='search-bar__input'
          type='text'
          value={value}
          placeholder={placeholder}
          placeholderClass='search-bar__placeholder'
          onInput={handleInput}
          onFocus={handleFocus}
          onBlur={handleBlur}
          confirmType='search'
          onConfirm={handleSearch}
          disabled={loading}
        />

        {value && !loading && (
          <View className='search-bar__clear' onClick={handleClear}>
            <View className='search-bar__clear-icon' />
          </View>
        )}
      </View>

      <View 
        className={`search-bar__action ${value ? 'search-bar__action--active' : ''} ${loading ? 'search-bar__action--disabled' : ''}`}
        onClick={handleSearch}
      >
        搜索
      </View>
    </View>
  )
})
===== End of File: components\search-bar\index.tsx =====


===== File: components\service-card\index.scss =====
@import "../../styles/custom-theme.scss";

.service-card {
  position: relative;
  background: $color-bg-base;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);

  &__main {
    padding: 24px 28px;
    position: relative;
    cursor: pointer;
    transition: background-color 0.25s ease;

    &:hover {
      background: rgba($color-brand, 0.02);
    }

    &:active {
      background: rgba($color-brand, 0.04);
    }
  }

  &__header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
  }

  &__title-wrap {
    flex: 1;
    margin-right: 20px;
  }

  &__title {
    font-size: 32px;
    font-weight: 600;
    color: $color-text-title;
    line-height: 1.4;
  }

  &__warranty {
    display: inline-block;
    margin-left: 12px;
    padding: 4px 16px;
    font-size: 24px;
    color: $color-brand;
    background: rgba($color-brand, 0.08);
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.25s ease;

    &:hover {
      background: rgba($color-brand, 0.12);
    }
  }

  &__price-wrap {
    text-align: right;
  }

  &__price {
    font-size: 36px;
    font-weight: bold;
    color: $color-brand;
    transition: color 0.25s ease;
  }

  &__unit {
    font-size: 24px;
    color: rgba($color-text-secondary, 0.85);
    margin-left: 2px;
  }

  &__features {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 20px;
  }

  &__feature-tag {
    padding: 8px 16px;
    font-size: 24px;
    color: $color-text-secondary;
    background: $color-grey-6;
    border-radius: 8px;
    transition: all 0.25s ease;

    &:hover {
      background: $color-grey-5;
      color: $color-text-base;
    }
  }

  &__desc {
    font-size: 28px;
    color: $color-text-secondary;
    line-height: 1.6;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-right: 40px;
  }

  &__arrow {
    position: absolute;
    right: 28px;
    top: 50%;
    width: 12px;
    height: 12px;
    border-right: 2px solid rgba($color-text-title, 0.3);
    border-bottom: 2px solid rgba($color-text-title, 0.3);
    transform: translateY(-50%) rotate(45deg);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
  }

  &__expand {
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    transform: translateY(-12px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: max-height, opacity, transform;
    border-top: 1px solid $color-border-base;
  }

  &__info {
    display: flex;
    gap: 16px;
    padding: 24px 28px;
  }

  &__info-item {
    flex: 1;
    padding: 20px;
    background: $color-grey-6;
    border-radius: 12px;
    text-align: center;
    transition: all 0.25s ease;

    &:hover {
      background: $color-grey-5;
      transform: translateY(-1px);
    }
  }

  &__info-label {
    display: block;
    font-size: 24px;
    color: $color-text-secondary;
    margin-bottom: 8px;
  }

  &__info-value {
    display: block;
    font-size: 28px;
    color: $color-text-base;
    font-weight: 600;
  }

  &__process {
    padding: 24px 28px;
    border-top: 1px solid $color-border-base;
  }

  &__process-title {
    font-size: 28px;
    font-weight: 600;
    color: $color-text-title;
    margin-bottom: 32px;
  }

  &__process-steps {
    position: relative;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;

    &::before {
      content: '';
      position: absolute;
      top: 24px;
      left: 60px;
      right: 60px;
      height: 2px;
      background: $color-border-base;
    }
  }

  &__process-step {
    position: relative;
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    z-index: 1;
    transition: transform 0.25s ease;

    &:hover {
      transform: translateY(-2px);
    }
  }

  &__step-number {
    width: 48px;
    height: 48px;
    background: $color-brand;
    color: $color-white;
    font-size: 24px;
    font-weight: 600;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 16px;
    transition: all 0.25s ease;
    box-shadow: 0 2px 8px rgba($color-brand, 0.2);

    &:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba($color-brand, 0.25);
    }
  }

  &__step-title {
    font-size: 28px;
    font-weight: 600;
    color: $color-text-title;
    margin-bottom: 8px;
  }

  &__step-desc {
    font-size: 24px;
    color: $color-text-secondary;
    line-height: 1.5;
  }

  &__book {
    margin: 0 28px 28px;
    height: 88px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 32px;
    font-weight: 600;
    color: $color-white;
    background: $color-brand;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.25s ease;
    box-shadow: 0 2px 8px rgba($color-brand, 0.2);

    &:hover {
      background: darken($color-brand, 5%);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba($color-brand, 0.25);
    }

    &:active {
      transform: translateY(0);
      opacity: 0.9;
    }
  }

  &--expanded {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);

    .service-card__arrow {
      transform: translateY(-50%) rotate(-135deg);
      border-color: $color-brand;
    }

    .service-card__expand {
      max-height: 2000px;
      opacity: 1;
      transform: translateY(0);
    }

    .service-card__main {
      background: rgba($color-brand, 0.02);
    }
  }

  &--loading {
    min-height: 200px;
    
    .service-card__skeleton {
      padding: 24px 28px;
    }

    .service-card__skeleton-line {
      height: 24px;
      background: $color-grey-6;
      border-radius: 8px;
      margin-bottom: 16px;
      animation: shimmer 1.5s infinite linear;
      background: linear-gradient(
        90deg,
        $color-grey-6 0%,
        lighten($color-grey-6, 2%) 50%,
        $color-grey-6 100%
      );
      background-size: 200% 100%;

      &:last-child {
        margin-bottom: 0;
        width: 60%;
      }
    }
  }
}

@keyframes shimmer {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

@media (max-width: 375px) {
  .service-card {
    &__main {
      padding: 20px 24px;
    }

    &__title {
      font-size: 28px;
    }

    &__warranty {
      font-size: 22px;
      padding: 4px 12px;
    }

    &__price {
      font-size: 32px;
    }

    &__unit {
      font-size: 22px;
    }

    &__feature-tag {
      font-size: 22px;
      padding: 6px 12px;
    }

    &__desc {
      font-size: 26px;
    }

    &__info,
    &__process {
      padding: 20px 24px;
    }

    &__info-item {
      padding: 16px;
    }

    &__info-label {
      font-size: 22px;
    }

    &__info-value {
      font-size: 26px;
    }

    &__process-title {
      font-size: 26px;
      margin-bottom: 24px;
    }

    &__step-number {
      width: 40px;
      height: 40px;
      font-size: 22px;
    }

    &__step-title {
      font-size: 26px;
    }

    &__step-desc {
      font-size: 22px;
    }

    &__book {
      margin: 0 24px 24px;
      height: 80px;
      font-size: 28px;
    }
  }
}
===== End of File: components\service-card\index.scss =====


===== File: components\service-card\index.tsx =====
// components/service-card/index.tsx
import { memo, useCallback } from 'react'
import { View, Text } from '@tarojs/components'
import type { ServiceItem } from '../../types'
import './index.scss'

interface ServiceCardProps {
  service?: ServiceItem
  loading?: boolean
  expanded?: boolean
  className?: string
  onToggle?: (id: number) => void
  onBook?: (service: ServiceItem) => void
}

export const ServiceCard = memo(({
  service,
  loading = false,
  expanded = false,
  className = '',
  onToggle,
  onBook
}: ServiceCardProps) => {

  const handleToggle = useCallback(() => {
    if (service) {
      onToggle?.(service.id)
    }
  }, [service, onToggle])

  const handleBook = useCallback((e: any) => {
    e.stopPropagation()
    if (service) {
      onBook?.(service)
    }
  }, [service, onBook])

  // 加载状态
  if (loading) {
    return (
      <View className='service-card service-card--loading'>
        <View className='service-card__skeleton'>
          <View className='service-card__skeleton-line' style='width: 60%' />
          <View className='service-card__skeleton-line' style='width: 40%' />
          <View className='service-card__skeleton-line' style='width: 90%' />
        </View>
      </View>
    )
  }

  // 无数据状态
  if (!service) return null

  return (
    <View className={`service-card ${expanded ? 'service-card--expanded' : ''} ${className}`}>
      {/* 主要内容区 */}
      <View className='service-card__main' onClick={handleToggle}>
        {/* 头部信息 */}
        <View className='service-card__header'>
          <View className='service-card__title-wrap'>
            <Text className='service-card__title'>{service.title}</Text>
            {service.warranty && (
              <Text className='service-card__warranty'>{service.warranty}</Text>
            )}
          </View>

          <View className='service-card__price-wrap'>
            <Text className='service-card__price'>¥{service.price}</Text>
            <Text className='service-card__unit'>/{service.unit}</Text>
          </View>
        </View>

        {/* 特性标签 */}
        {service.features?.length > 0 && (
          <View className='service-card__features'>
            {service.features.map((feature, index) => (
              <Text
                key={`${service.id}-feature-${index}`}
                className='service-card__feature-tag'
              >
                {feature}
              </Text>
            ))}
          </View>
        )}

        {/* 描述文本 */}
        <Text className='service-card__desc'>{service.description}</Text>
        
        {/* 展开指示器 */}
        <View className='service-card__arrow' />
      </View>

      {/* 展开内容区 */}
      <View className='service-card__expand'>
        {/* 基本信息 */}
        <View className='service-card__info'>
          {service.estimatedDuration && (
            <View className='service-card__info-item'>
              <Text className='service-card__info-label'>预计工期</Text>
              <Text className='service-card__info-value'>
                {service.estimatedDuration}
              </Text>
            </View>
          )}
          
          {(service.minArea || service.maxArea) && (
            <View className='service-card__info-item'>
              <Text className='service-card__info-label'>适用面积</Text>
              <Text className='service-card__info-value'>
                {service.minArea && service.maxArea
                  ? `${service.minArea}-${service.maxArea}㎡`
                  : service.minArea
                    ? `≥${service.minArea}㎡`
                    : `≤${service.maxArea}㎡`
                }
              </Text>
            </View>
          )}
        </View>

        {/* 服务流程 */}
        {service.process?.length > 0 && (
          <View className='service-card__process'>
            <Text className='service-card__process-title'>服务流程</Text>
            <View className='service-card__process-steps'>
              {service.process.map((step, index) => (
                <View
                  key={`${service.id}-step-${index}`}
                  className='service-card__process-step'
                >
                  <View className='service-card__step-number'>{index + 1}</View>
                  <Text className='service-card__step-title'>{step.title}</Text>
                  <Text className='service-card__step-desc'>{step.description}</Text>
                </View>
              ))}
            </View>
          </View>
        )}

        {/* 预约按钮 */}
        <View className='service-card__book' onClick={handleBook}>
          立即预约
        </View>
      </View>
    </View>
  )
})

export default ServiceCard
===== End of File: components\service-card\index.tsx =====


===== File: components\tab-bar\index.scss =====
@import "../../styles/custom-theme.scss";

.tab-bar {
  position: relative;
  z-index: 0;
  height: 88px;
  display: flex;
  background: $color-bg-base;
  padding: 0 24px;
  border-bottom: 1px solid $color-border-base;

  &__item {
    flex: 1;
    height: 88px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    cursor: pointer;
    user-select: none;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);

    &:hover {
      .tab-bar__text {
        color: mix($color-brand, $color-text-secondary, 70%);
      }
    }

    &:active {
      .tab-bar__text {
        color: mix($color-brand, $color-text-secondary, 85%);
        transform: scale(0.98);
      }
    }

    &--active {
      .tab-bar__text {
        color: $color-brand;
        font-weight: 600;
        transform: translateY(-1px);
      }

      &::after {
        content: '';
        position: absolute;
        left: 50%;
        bottom: 0;
        width: 24px;
        height: 3px;
        background: $color-brand;
        border-radius: 3px;
        transform: translateX(-50%) scaleX(1);
        transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      }

      &:hover::after {
        width: 32px;
      }
    }

    &:not(.tab-bar__item--active)::after {
      content: '';
      position: absolute;
      left: 50%;
      bottom: 0;
      width: 24px;
      height: 3px;
      background: $color-brand;
      border-radius: 3px;
      transform: translateX(-50%) scaleX(0);
      transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0;
    }

    &:hover:not(.tab-bar__item--active)::after {
      transform: translateX(-50%) scaleX(0.5);
      opacity: 0.3;
    }
  }

  &__text {
    position: relative;
    font-size: 28px;
    color: $color-text-secondary;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    padding: 0 12px;
    display: flex;
    align-items: center;
    white-space: nowrap;
  }
}

@media (max-width: 375px) {
  .tab-bar {
    height: 80px;
    padding: 0 16px;

    &__item {
      height: 80px;

      &--active::after {
        width: 20px;

        &:hover::after {
          width: 28px;
        }
      }
    }

    &__text {
      font-size: 26px;
      padding: 0 8px;
    }
  }
}
===== End of File: components\tab-bar\index.scss =====


===== File: components\tab-bar\index.tsx =====
// components/tab-bar/index.tsx
import { memo } from 'react'
import { View, Text } from '@tarojs/components'
import './index.scss'

interface TabItem {
  title: string
  value: string | number
}

interface TabBarProps {
  tabs: TabItem[]
  activeTab: string | number
  className?: string
  onChange: (value: string | number) => void
}

export const TabBar = memo(({
  tabs,
  activeTab,
  className = '',
  onChange
}: TabBarProps) => {
  if (!tabs?.length) return null

  return (
    <View className={`tab-bar ${className}`}>
      {tabs.map(tab => (
        <View
          key={tab.value}
          className={`tab-bar__item ${activeTab === tab.value ? 'tab-bar__item--active' : ''}`}
          onClick={() => onChange(tab.value)}
        >
          <Text className='tab-bar__text'>{tab.title}</Text>
        </View>
      ))}
    </View>
  )
})

export default TabBar
===== End of File: components\tab-bar\index.tsx =====


===== File: config\index.ts =====
import type { Config } from '../types'

export const config: Config = {
    ui: {
      banner: {
        interval: 3000,
        duration: 500
      },
      cases: {
        interval: 4000,
        duration: 500,
        displayCount: 0,
        cardHeight: 0
      }
    },
    contact: {
      phone: '400-888-8888',
      wechat: 'waterproof888'
    }
}
===== End of File: config\index.ts =====


===== File: index.html =====
<!-- @ts-nocheck -->
<!DOCTYPE html>
<html>
<head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
  <meta content="width=device-width,initial-scale=1,user-scalable=no" name="viewport">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-touch-fullscreen" content="yes">
  <meta name="format-detection" content="telephone=no,address=no">
  <meta name="apple-mobile-web-app-status-bar-style" content="white">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>waterproof-app</title>
  <script><%= htmlWebpackPlugin.options.script %></script>
</head>
<body>
  <div id="app"></div>
</body>
</html>
===== End of File: index.html =====


===== File: pages\index\index.config.ts =====
export default {
  navigationBarTitleText: '防水服务',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5',
  backgroundTextStyle: 'dark',
  navigationBarBackgroundColor: '#ffffff',
  navigationBarTextStyle: 'black'
}
===== End of File: pages\index\index.config.ts =====


===== File: pages\index\index.scss =====
@import "../../styles/custom-theme.scss";

.index {
 position: relative;
 min-height: 100vh;
 background: $color-bg;

 /* Header区域 */
 &__header {
   position: relative;
   z-index: $z-index-banner;
   width: 100%;
   height: 420px;
   overflow: hidden;

   .swiper {
     width: 100%;
     height: 100%;
     
     .swiper-item {
       width: 100%;
       height: 100%;
       background: $color-bg-light;
     }

     .wx-swiper-dots {
       bottom: $spacing-sm;
       
       .wx-swiper-dot {
         width: 8px;
         height: 8px;
         border-radius: $radius-full;
         transition: all $duration-base $ease-base;
         
         &.wx-swiper-dot-active {
           width: 16px;
         }
       }
     }
   }
 }

 &__banner-item {
   position: relative;
   width: 100%;
   height: 100%;
   overflow: hidden;
 }

 &__banner-image {
   width: 100%;
   height: 100%;
   object-fit: cover;
   will-change: transform;
 }

 &__banner-text {
   position: absolute;
   left: 0;
   right: 0;
   bottom: 0;
   z-index: $z-index-content;
   padding: $spacing-xxl $spacing-xl $spacing-lg;
   background: linear-gradient(
     180deg,
     transparent 0%,
     rgba($color-black, 0.6) 30%,
     rgba($color-black, 0.85) 100%
   );
 }

 &__banner-title {
   display: block;
   font-size: $font-size-xxl;
   font-weight: $font-weight-bold;
   color: $color-white;
   margin-bottom: $spacing-sm;
 }

 &__banner-subtitle {
   display: block;
   font-size: $font-size-base;
   color: rgba($color-white, 0.95);
 }

 /* 内容区域 */
 &__content {
   position: relative;
   z-index: $z-index-content;
   padding: $spacing-base;
   min-height: calc(100vh - 480px);
 }

 /* 服务介绍 */
 &__service-intro {
   margin-bottom: $spacing-sm;
   padding: $spacing-xl;
   background: $color-bg-base;
   border-radius: $radius-lg;
   box-shadow: $shadow-base;
   min-height: 200px;
 }

 &__title {
   font-size: $font-size-xl;
   font-weight: $font-weight-bold;
   color: $color-text-title;
   margin-bottom: $spacing-xl;
 }

 &__btn-group {
   display: flex;
   gap: $spacing-base;

   .at-button {
     flex: 1;
     height: 100px;
     background-color: $color-brand;
     color: $color-white;
   }
 }

 /* 案例展示 */
 &__cases {
   margin-bottom: $spacing-sm;
   padding: $spacing-xl;
   background: $color-bg-base;
   border-radius: $radius-lg;
   box-shadow: $shadow-base;
   min-height: 200px;
 }

 &__case-swiper {
   min-height: 460px;
   padding: $spacing-lg 0;
 }

 &__case-item {
   height: 420px;
   margin: 0 $spacing-sm;
   background: $color-bg-base;
   border-radius: $radius-lg;
   overflow: hidden;
   transform: scale(0.92);
   transition: $transition-base;
   box-shadow: $shadow-base;
   will-change: transform;

   &::after {
     content: '';
     position: absolute;
     inset: 0;
     background: rgba($color-black, 0.35);
     opacity: 1;
     transition: opacity $duration-base $ease-base;
     will-change: opacity;
     z-index: $z-index-overlay;
   }

   &--active {
     transform: scale(1);
     box-shadow: $shadow-lg;

     &::after {
       opacity: 0;
     }
   }
 }

 &__case-image {
   width: 100%;
   height: 240px;
   object-fit: cover;
   will-change: transform;
 }

 &__case-content {
   position: relative;
   z-index: $z-index-content;
   padding: $spacing-lg;
   background: $color-bg-base;
 }

 &__case-title {
   display: -webkit-box;
   -webkit-box-orient: vertical;
   -webkit-line-clamp: 2;
   overflow: hidden;
   font-size: $font-size-lg;
   font-weight: $font-weight-semibold;
   color: $color-text-title;
   margin-bottom: $spacing-sm;
 }

 &__case-desc {
   display: -webkit-box;
   -webkit-box-orient: vertical;
   -webkit-line-clamp: 2;
   overflow: hidden;
   font-size: $font-size-base;
   color: $color-text-secondary;
 }

 /* 优势展示 */
 &__advantages {
   padding: $spacing-xl;
   background: $color-bg-base;
   border-radius: $radius-lg;
   box-shadow: $shadow-base;
 }

 &__advantages-grid {
   display: grid;
   grid-template-columns: repeat(2, 1fr);
   grid-template-rows: repeat(2, 1fr);
   gap: $spacing-base;
   margin-bottom: $spacing-xl;
 }

 &__advantages-item {
   aspect-ratio: 1;
   padding: $spacing-base;
   background: rgba($color-brand, 0.04);
   border-radius: $radius-lg;
   display: flex;
   flex-direction: column;
   align-items: center;
   justify-content: center;
   transition: transform $duration-fast $ease-base;

   &:hover {
     transform: translateY(-2px);
   }
 }

 &__advantage-icon {
   font-size: 48px;
   margin-bottom: $spacing-sm;
 }

 &__advantage-value {
   font-size: $font-size-xl;
   font-weight: $font-weight-bold;
   color: $color-brand;
   margin-bottom: $spacing-xs;
 }

 &__advantage-label {
   font-size: $font-size-base;
   color: $color-text-secondary;
 }

 &__book-btn {
   width: 100%;
   height: 100px;
   background-color: $color-brand;
   color: $color-white;
 }
}

/* 加载和错误状态 */
.loading,
.error {
 min-height: 100vh;
 display: flex;
 flex-direction: column;
 align-items: center;
 justify-content: center;
 gap: $spacing-xl;
 color: $color-text-secondary;
}

/* 响应式 */
@media screen and (max-width: $breakpoint-xs) {
 .index {
   &__header {
     height: 360px;
   }

   &__content {
     min-height: calc(100vh - 360px);
     padding: $spacing-sm;
   }
   
   &__advantages-grid {
     gap: $spacing-sm;
   }
   
   &__advantages-item {
     padding: $spacing-sm;
   }

   &__advantage-icon {
     font-size: 40px;
   }

   &__book-btn {
     height: 88px;
   }
 }
}
===== End of File: pages\index\index.scss =====


===== File: pages\index\index.tsx =====
import { useEffect, useState, useCallback, useRef } from 'react'
import { View, Text, Image, Swiper, SwiperItem } from '@tarojs/components'
import type { SwiperProps } from '@tarojs/components'
import { AtButton } from 'taro-ui'
import Taro, { useDidShow } from '@tarojs/taro'
import { api } from '../../services/index-api'
import { config } from '../../config'
import { handleError } from '../../utils/error'
import { CaseDetailModal } from '../../components/case-detail-modal'
import type { Banner, ServiceCase, ServiceAdvantage } from '../../types'
import './index.scss'

export default function Index() {
  // 状态管理
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [banners, setBanners] = useState<Banner[]>([])
  const [cases, setCases] = useState<ServiceCase[]>([])
  const [advantages, setAdvantages] = useState<ServiceAdvantage[]>([])
  const [selectedCase, setSelectedCase] = useState<ServiceCase | null>(null)
  const [showCaseModal, setShowCaseModal] = useState(false)
  const [currentCaseIndex, setCurrentCaseIndex] = useState(0)

  // Refs
  const refreshing = useRef(false)
  const mounted = useRef(false)

  // 数据加载
  const fetchData = useCallback(async (showLoading = true) => {
    try {
      if (showLoading) setLoading(true)
      setError(null)

      // 并行获取数据
      const [bannerRes, caseRes, advantageRes] = await Promise.all([
        api.getBanners(),
        api.getCases(),
        api.getAdvantages()
      ])

      if (mounted.current) {
        setBanners(bannerRes.data)
        setCases(caseRes.data)
        setAdvantages(advantageRes.data)
      }
    } catch (err) {
      if (mounted.current) {
        setError(handleError(err))
      }
    } finally {
      if (showLoading && mounted.current) {
        setLoading(false)
      }
      refreshing.current = false
    }
  }, [])

  // 初始化
  useEffect(() => {
    mounted.current = true
    fetchData()
    return () => {
      mounted.current = false
    }
  }, [fetchData])

  // 页面显示时刷新
  useDidShow(() => {
    if (!refreshing.current) {
      fetchData(false)
    }
  })

  // 下拉刷新
  const handleRefresh = useCallback(async () => {
    if (refreshing.current) return
    refreshing.current = true
    
    try {
      await fetchData(false)
      Taro.showToast({ title: '刷新成功', icon: 'success' })
    } catch (error) {
      Taro.showToast({
        title: handleError(error),
        icon: 'none'
      })
    } finally {
      Taro.stopPullDownRefresh()
    }
  }, [fetchData])

  // 电话咨询
  const handleCall = useCallback(() => {
    Taro.makePhoneCall({
      phoneNumber: config.contact.phone
    }).catch(err => {
      if (!err.errMsg?.includes('cancel')) {
        Taro.showToast({ title: '拨号失败', icon: 'none' })
      }
    })
  }, [])

  // 复制微信号
  const handleWechat = useCallback(() => {
    Taro.setClipboardData({
      data: config.contact.wechat,
      success: () => {
        Taro.showToast({
          title: '微信号已复制',
          icon: 'none'
        })
      }
    })
  }, [])

  // 查看案例详情
  const handleCaseClick = useCallback((caseItem: ServiceCase) => {
    setSelectedCase(caseItem)
    setShowCaseModal(true)
  }, [])

  // 预约按钮
  const handleBooking = useCallback(() => {
    Taro.switchTab({ url: '/pages/contact/index' })
  }, [])

  // 案例滑动
  const handleCaseChange: SwiperProps['onChange'] = useCallback((e) => {
    setCurrentCaseIndex(e.detail.current)
  }, [])

  // 加载状态
  if (loading) {
    return (
      <View className='loading'>
        <Text>加载中...</Text>
      </View>
    )
  }

  // 错误状态
  if (error) {
    return (
      <View className='error'>
        <Text>{error}</Text>
        <AtButton type='primary' onClick={handleRefresh}>重试</AtButton>
      </View>
    )
  }

  return (
    <View className='index'>
      {/* Banner区域 */}
      <View className='index__header'>
        <Swiper
          className='swiper'
          circular
          autoplay
          interval={3000}
          duration={500}
          indicatorDots
          indicatorColor='rgba(255, 255, 255, 0.4)'
          indicatorActiveColor='#ffffff'
        >
          {banners.map(banner => (
            <SwiperItem key={banner.id} className='swiper-item'>
              <View className='index__banner-item'>
                <Image 
                  src={banner.imageUrl}
                  className='index__banner-image'
                  mode='aspectFill'
                  lazyLoad
                />
                <View className='index__banner-text'>
                  <Text className='index__banner-title'>{banner.title}</Text>
                  <Text className='index__banner-subtitle'>{banner.subtitle}</Text>
                </View>
              </View>
            </SwiperItem>
          ))}
        </Swiper>
      </View>

      <View className='index__content'>
        {/* 服务介绍 */}
        <View className='index__service-intro'>
          <View className='index__title'>专业防水服务</View>
          <View className='index__btn-group'>
            <AtButton type='primary' onClick={handleCall}>📞电话咨询</AtButton>
            <AtButton type='secondary' onClick={handleWechat}>💬微信咨询</AtButton>
          </View>
        </View>

        {/* 案例展示 */}
        <View className='index__cases'>
          <View className='index__title'>精选案例</View>
          <Swiper
            className='index__case-swiper'
            circular
            autoplay={!showCaseModal}
            interval={4000}
            duration={500}
            previousMargin='30px'
            nextMargin='30px'
            onChange={handleCaseChange}
          >
            {cases.map((item, index) => (
              <SwiperItem key={item.id}>
                <View 
                  className={`index__case-item ${
                    index === currentCaseIndex ? 'index__case-item--active' : ''
                  }`}
                  onClick={() => handleCaseClick(item)}
                >
                  <Image 
                    src={item.imageUrl}
                    className='index__case-image'
                    mode='aspectFill'
                    lazyLoad
                  />
                  <View className='index__case-content'>
                    <Text className='index__case-title'>{item.title}</Text>
                    <Text className='index__case-desc'>{item.description}</Text>
                  </View>
                </View>
              </SwiperItem>
            ))}
          </Swiper>
        </View>

        {/* 服务优势 */}
        <View className='index__advantages'>
          <View className='index__title'>我们的优势</View>
          <View className='index__advantages-grid'>
            {advantages.map(item => (
              <View key={item.id} className='index__advantages-item'>
                <Text className='index__advantage-icon'>{item.icon}</Text>
                <Text className='index__advantage-value'>{item.value}</Text>
                <Text className='index__advantage-label'>{item.label}</Text>
              </View>
            ))}
          </View>
          <AtButton 
            type='primary'
            className='index__book-btn'
            onClick={handleBooking}
          >
            快速预约
          </AtButton>
        </View>
      </View>

      {/* 案例详情弹窗 */}
      <CaseDetailModal
        isOpen={showCaseModal}
        onClose={() => setShowCaseModal(false)}
        data={selectedCase}
      />
    </View>
  )
}
===== End of File: pages\index\index.tsx =====


===== File: pages\project\index.config.ts =====
// pages/project/index.config.ts
export default {
  navigationBarTitleText: '防水服务',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5',
  backgroundTextStyle: 'dark',
  navigationBarBackgroundColor: '#ffffff',
  navigationBarTextStyle: 'black'
}
===== End of File: pages\project\index.config.ts =====


===== File: pages\project\index.scss =====
@import "../../styles/custom-theme.scss";

.project {
  position: relative;
  z-index: 0;
  min-height: 100vh;
  background: $color-bg;
  box-sizing: border-box;

  &__header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 176px;
    background: $color-bg-base;
    z-index: 10;
    border-bottom: 1px solid $color-border-base;
    transition: box-shadow 0.3s ease;

    &--shadow {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    }

    :global {
      .search-bar {
        position: relative;
        z-index: 1;
        height: 88px;
        padding: 12px 24px;
      }

      .tab-bar {
        position: relative;
        z-index: 0;
        height: 88px;
        padding: 0 24px;
      }
    }
  }

  &__content {
    position: relative;
    z-index: 1;
    padding-top: 176px;
    min-height: calc(100vh - 176px);
    box-sizing: border-box;
    transition: transform 0.3s ease;
  }

  &__services {
    padding: 20px 20px 0;
    transition: padding 0.3s ease;
  }

  &__skeleton {
    display: flex;
    flex-direction: column;
    gap: 16px;
    min-height: 600px;
    padding: 4px;
  }

  &__skeleton-item {
    height: 200px;
    background: $color-bg-base;
    border-radius: 12px;
    overflow: hidden;
    position: relative;
  }

  &__list {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin-bottom: 32px;
  }

  &__list-item {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.5s ease forwards;
  }

  &__list-item-1 { animation-delay: 0.05s; }
  &__list-item-2 { animation-delay: 0.10s; }
  &__list-item-3 { animation-delay: 0.15s; }
  &__list-item-4 { animation-delay: 0.20s; }
  &__list-item-5 { animation-delay: 0.25s; }
  &__list-item-6 { animation-delay: 0.30s; }
  &__list-item-7 { animation-delay: 0.35s; }
  &__list-item-8 { animation-delay: 0.40s; }
  &__list-item-9 { animation-delay: 0.45s; }
  &__list-item-10 { animation-delay: 0.50s; }

  &__empty {
    height: 240px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: $color-text-secondary;
    font-size: 28px;
    background: $color-bg-base;
    border-radius: 12px;
    margin: 0 4px;
    animation: fadeIn 0.3s ease;
  }

  &__empty-icon {
    font-size: 48px;
    margin-bottom: 16px;
    color: rgba($color-text-secondary, 0.5);
  }

  &__empty-text {
    font-size: 28px;
    color: $color-text-secondary;
  }

  &__faq {
    padding: 0 20px 32px;
    animation: fadeIn 0.5s ease;

    :global {
      .faq-section {
        min-height: 200px;
      }
    }
  }
}

.taro_page {
  padding-bottom: constant(safe-area-inset-bottom);
  padding-bottom: env(safe-area-inset-bottom);
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@media screen and (min-width: 768px) {
  .project {
    &__services {
      padding-left: 20px;
      padding-right: 20px;
    }

    &__faq {
      padding-left: 20px;
      padding-right: 20px;
    }
  }
}

@media screen and (max-width: 375px) {
  .project {
    &__header {
      height: 160px;

      :global {
        .search-bar {
          height: 80px;
          padding: 10px 20px;
        }

        .tab-bar {
          height: 80px;
          padding: 0 20px;
        }
      }
    }

    &__content {
      padding-top: 160px;
      min-height: calc(100vh - 160px);
    }

    &__services {
      padding: 16px 16px 0;
    }

    &__list {
      gap: 12px;
      margin-bottom: 24px;
    }

    &__empty {
      height: 200px;
    }

    &__empty-icon {
      font-size: 40px;
      margin-bottom: 12px;
    }

    &__empty-text {
      font-size: 26px;
    }

    &__faq {
      padding: 0 16px 24px;
    }
  }
}
===== End of File: pages\project\index.scss =====


===== File: pages\project\index.tsx =====
// pages/project/index.tsx
import { useCallback, useEffect, useRef, useState } from 'react'
import { View } from '@tarojs/components'
import Taro, { useDidShow } from '@tarojs/taro'
import { SearchBar } from '../../components/search-bar'
import { TabBar } from '../../components/tab-bar'
import { ServiceCard } from '../../components/service-card'
import { FAQSection } from '../../components/faq-section'
import { projectApi } from '../../services/project-api'
import { handleError } from '../../utils/error'
import type { ServiceItem, FAQ, ServiceType } from '../../types'
import './index.scss'

const TABS = [
  { title: '全部', value: 'all' },
  { title: '家庭防水', value: 'home' },
  { title: '室外防水', value: 'outdoor' },
  { title: '工业防水', value: 'industrial' }
]

export default function ProjectPage() {
  // 页面状态
  const [services, setServices] = useState<ServiceItem[]>([])
  const [faqs, setFaqs] = useState<FAQ[]>([])
  const [loading, setLoading] = useState(false)
  
  // UI状态
  const [currentTab, setCurrentTab] = useState<ServiceType>('all')
  const [searchValue, setSearchValue] = useState('')
  const [expandedId, setExpandedId] = useState<number | null>(null)

  // 防抖定时器
  const searchTimer = useRef<NodeJS.Timeout>()

  // 加载服务列表
  const loadServices = useCallback(async () => {
    try {
      setLoading(true)
      const keyword = searchValue.trim()
      
      const response = await (keyword 
        ? projectApi.searchServices(keyword, currentTab)
        : projectApi.getServicesByType(currentTab)
      )

      setServices(response.data)
    } catch (err) {
      Taro.showToast({
        title: handleError(err),
        icon: 'none'
      })
      setServices([])
    } finally {
      setLoading(false)
    }
  }, [currentTab, searchValue])

  // 加载FAQ
  const loadFaqs = useCallback(async () => {
    try {
      const response = await projectApi.getFaqs()
      setFaqs(response.data)
    } catch (err) {
      console.error('加载FAQ失败:', err)
    }
  }, [])

  // 搜索变化处理
  const handleSearchChange = useCallback((value: string) => {
    setSearchValue(value)
    
    if (searchTimer.current) {
      clearTimeout(searchTimer.current)
    }

    searchTimer.current = setTimeout(() => {
      loadServices()
    }, 300)
  }, [loadServices])

  // 搜索按钮点击
  const handleSearch = useCallback(() => {
    if (searchTimer.current) {
      clearTimeout(searchTimer.current)
    }
    loadServices()
  }, [loadServices])

  // Tab切换处理
  const handleTabChange = useCallback((value: string | number) => {
    setCurrentTab(value as ServiceType)
    setSearchValue('') // 清空搜索内容
    setExpandedId(null) // 重置展开状态
    
    // 切换分类立即加载
    if (searchTimer.current) {
      clearTimeout(searchTimer.current)
    }
    loadServices()
  }, [loadServices])

  // 展开/收起处理
  const handleToggle = useCallback((id: number) => {
    setExpandedId(prev => prev === id ? null : id)
  }, [])

  // 预约处理
  const handleBook = useCallback(async (service: ServiceItem) => {
    try {
      await Taro.setStorage({
        key: 'selected_service',
        data: service
      })
      await Taro.navigateTo({
        url: '/pages/contact/index'
      })
    } catch {
      Taro.showToast({
        title: '预约失败，请重试',
        icon: 'none'
      })
    }
  }, [])

  // 初始化加载
  useEffect(() => {
    loadServices()
    loadFaqs()
  }, [loadServices, loadFaqs])

  // 处理返回刷新
  useDidShow(() => {
    loadServices()
  })

  // 清理定时器
  useEffect(() => {
    return () => {
      if (searchTimer.current) {
        clearTimeout(searchTimer.current)
      }
    }
  }, [])

  return (
    <View className='project'>
      <View className='project__header'>
        <SearchBar
          value={searchValue}
          placeholder={`搜索${currentTab === 'all' ? '' : TABS.find(tab => tab.value === currentTab)?.title}服务`}
          loading={loading}
          onChange={handleSearchChange}
          onSearch={handleSearch}
          onClear={() => handleSearchChange('')}
        />
        <TabBar
          tabs={TABS}
          activeTab={currentTab}
          onChange={handleTabChange}
        />
      </View>

      <View className='project__content'>
        <View className='project__services'>
          {loading ? (
            <View className='project__skeleton'>
              {Array(3).fill(null).map((_, index) => (
                <ServiceCard key={index} loading />
              ))}
            </View>
          ) : services.length ? (
            <View className='project__list'>
              {services.map(service => (
                <ServiceCard
                  key={service.id}
                  service={service}
                  expanded={expandedId === service.id}
                  onToggle={handleToggle}
                  onBook={handleBook}
                />
              ))}
            </View>
          ) : (
            <View className='project__empty'>
              {searchValue ? '未找到相关服务' : '暂无服务内容'}
            </View>
          )}
        </View>

        {faqs.length > 0 && (
          <View className='project__faq'>
            <FAQSection faqs={faqs} />
          </View>
        )}
      </View>
    </View>
  )
}
===== End of File: pages\project\index.tsx =====


===== File: styles\custom-theme.scss =====
/* custom-theme.scss */
@import "~taro-ui/dist/style/index.scss";

/* Z-index Management */
$z-index-modal: 1000;
$z-index-popup: 900;
$z-index-mask: 800;
$z-index-navigation: 100;
$z-index-header: 90; 
$z-index-footer: 90;
$z-index-float: 80;
$z-index-dropdown: 70;
$z-index-sticky: 60;
$z-index-banner: 50;
$z-index-fixed: 40;
$z-index-backdrop: 30;
$z-index-overlay: 20;
$z-index-content: 1;
$z-index-base: -1;

/* Brand Colors */
$color-brand: #2563eb; 
$color-brand-light: #60a5fa;
$color-brand-dark: #1d4ed8;
$color-brand-disabled: #bfdbfe;

/* Function Colors */
$color-success: #22c55e;                    
$color-error: #ef4444;                      
$color-warning: #f59e0b;                    
$color-info: #3b82f6;                      

/* Status Colors */
$color-success-light: #86efac;
$color-success-dark: #16a34a;
$color-success-disabled: #bbf7d0;

$color-error-light: #fca5a5;
$color-error-dark: #dc2626;
$color-error-disabled: #fecaca;

$color-warning-light: #fcd34d;
$color-warning-dark: #d97706;
$color-warning-disabled: #fde68a;

/* Basic Colors */
$color-black: #000000;
$color-white: #ffffff;

/* Text Colors */
$color-text-base: #1e293b;                  
$color-text-base-inverse: #ffffff;          
$color-text-secondary: #475569;             
$color-text-placeholder: #94a3b8;           
$color-text-disabled: #cbd5e1;              
$color-text-title: #0f172a;                 
$color-text-paragraph: #334155;             

/* Background Colors */
$color-bg: #f1f5f9;                      
$color-bg-base: #ffffff;                    
$color-bg-light: #f8fafc;                   
$color-bg-dark: #e2e8f0;                  

/* Border Colors */
$color-border-base: #cbd5e1;             
$color-border-light: #e2e8f0;
$color-border-split: #cbd5e1;            
$color-border-dark: #94a3b8;             

/* Component Size */
$size-xs: 20px;
$size-sm: 24px;
$size-base: 28px;
$size-lg: 32px;
$size-xl: 36px;

/* Font Size */
$font-size-xs: 20px;
$font-size-sm: 24px;
$font-size-base: 28px;
$font-size-lg: 32px;
$font-size-xl: 36px;
$font-size-xxl: 40px;

/* Font Weight */
$font-weight-light: 300;
$font-weight-normal: 400;
$font-weight-medium: 500;
$font-weight-semibold: 600;
$font-weight-bold: 700;

/* Line Height */
$line-height-compact: 1.2;
$line-height-base: 1.5;
$line-height-loose: 1.8;

/* Spacing */
$spacing-xxs: 4px;
$spacing-xs: 8px;
$spacing-sm: 12px;
$spacing-base: 16px;
$spacing-lg: 24px;
$spacing-xl: 32px;
$spacing-xxl: 48px;

/* Border Radius */
$radius-none: 0;
$radius-sm: 4px;
$radius-base: 8px;
$radius-lg: 12px;
$radius-xl: 16px;
$radius-full: 9999px;

/* Shadows */
$shadow-none: none;
$shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
$shadow-base: 0 2px 8px rgba(0, 0, 0, 0.08);
$shadow-lg: 0 4px 12px rgba(0, 0, 0, 0.1);
$shadow-xl: 0 8px 16px rgba(0, 0, 0, 0.12);

/* Animation Duration */
$duration-fast: 150ms;
$duration-base: 300ms;
$duration-slow: 450ms;

/* Animation Timing Functions */
$ease-base: cubic-bezier(0.4, 0, 0.2, 1);
$ease-in: cubic-bezier(0.4, 0, 1, 1);
$ease-out: cubic-bezier(0, 0, 0.2, 1);
$ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);

/* Breakpoints */
$breakpoint-xs: 375px;
$breakpoint-sm: 576px;
$breakpoint-md: 768px;

/* Layout */
$header-height: 88px;
$tab-bar-height: 98px;
$input-height: 88px;
$button-height: 88px;

/* Component Specific */
$card-padding: 24px;
$card-radius: $radius-lg;
$card-shadow: $shadow-base;

$modal-radius: $radius-lg;
$modal-shadow: $shadow-lg;

$button-radius: $radius-base;
$input-radius: $radius-base;

/* Overlay */
$mask-bg: rgba(0, 0, 0, 0.4);
$backdrop-filter: blur(8px);

/* Transition */
$transition-base: all $duration-base $ease-base;
$transition-fade: opacity $duration-base $ease-base;
$transition-slide: transform $duration-base $ease-base;

/* Component Override */
$at-button-height: $button-height;
$at-input-height: $input-height;
===== End of File: styles\custom-theme.scss =====

