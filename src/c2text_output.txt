📁 src
  📄 app.config.ts
  📄 app.scss
  📄 app.ts
  📁 components
    📁 faq-section
      📄 index.scss
      📄 index.tsx
    📁 search-bar
      📄 index.scss
      📄 index.tsx
    📁 service-card
      📄 index.scss
      📄 index.tsx
    📁 tab-bar
      📄 index.scss
      📄 index.tsx
  📁 config
    📄 index.ts
  📄 index.html
  📁 pages
    📁 project
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx
  📁 services
    📄 project-api.ts
    📄 project-mock-data.ts
  📁 styles
    📄 custom-theme.scss
  📁 types
    📄 index.ts
  📁 utils
    📄 error.ts

===== File: app.config.ts =====
// app.config.ts
export default defineAppConfig({
  pages: [
    'pages/index/index',
    'pages/project/index',
    'pages/cases/index',
    'pages/contact/index'
  ],
  window: {
    backgroundTextStyle: 'light',
    navigationBarBackgroundColor: '#ffffff',
    navigationBarTitleText: '防水服务',
    navigationBarTextStyle: 'black',
    backgroundColor: '#f6f6f6'
  },
  tabBar: {
    color: '#999999',
    selectedColor: '#2563eb',
    backgroundColor: '#ffffff',
    borderStyle: 'white',
    list: [
      {
        pagePath: 'pages/index/index',
        text: '首页',
        iconPath: 'assets/tab-bar/home.png',
        selectedIconPath: 'assets/tab-bar/home-active.png'
      },
      {
        pagePath: 'pages/project/index',
        text: '服务',
        iconPath: 'assets/tab-bar/service.png',
        selectedIconPath: 'assets/tab-bar/service-active.png'
      },
      {
        pagePath: 'pages/cases/index',
        text: '案例',
        iconPath: 'assets/tab-bar/case.png',
        selectedIconPath: 'assets/tab-bar/case-active.png'
      },
      {
        pagePath: 'pages/contact/index',
        text: '联系我们',
        iconPath: 'assets/tab-bar/contact.png',
        selectedIconPath: 'assets/tab-bar/contact-active.png'
      }
    ]
  }
})
===== End of File: app.config.ts =====


===== File: app.scss =====
// app.scss
@import "./styles/custom-theme.scss";

// 基础样式设置
page {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  font-size: 28px;
  line-height: 1.5;
  background: $color-bg;
  color: $color-text-base;
}
===== End of File: app.scss =====


===== File: app.ts =====
// app.tsx
import { PropsWithChildren } from 'react'
import { useLaunch, useError, getStorageSync, setStorageSync, onNetworkStatusChange } from '@tarojs/taro'
import './styles/custom-theme.scss'
import './app.scss'

function App({ children }: PropsWithChildren<any>) {
  useLaunch(() => {
    initApp()
  })

  useError((error) => {
    console.error('App Error:', error)
  })

  const initApp = async () => {
    try {
      // 初始化日志
      const logs = getStorageSync('logs') || []
      logs.unshift(Date.now())
      setStorageSync('logs', logs)

      // 网络状态监听
      onNetworkStatusChange((res) => {
        console.log('network status:', res.isConnected)
      })

    } catch (error) {
      console.error('App initialization failed:', error)
    }
  }

  return children
}

export default App
===== End of File: app.ts =====


===== File: components\faq-section\index.scss =====
// components/faq-section/index.scss
@import "../../styles/custom-theme.scss";

.faq-section {
  position: relative;
  min-height: 200px;
  background: $color-bg-base;
  border-radius: 12px;
  overflow: hidden;

  &__title {
    font-size: 32px;
    font-weight: 500;
    color: $color-text-base;
    padding: 24px;
  }

  &__list {
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 0 24px 24px;
  }
}

.faq-item {
  position: relative;
  min-height: 88px;
  background: $color-grey-6;
  border-radius: 8px;
  overflow: hidden;

  &__header {
    position: relative;
    padding: 20px 24px;
    cursor: pointer;

    &:active {
      opacity: 0.7;
    }
  }

  &__main {
    display: flex;
    align-items: center;
    gap: 12px;
    padding-right: 32px;
  }

  &__question {
    font-size: 28px;
    color: $color-text-base;
    line-height: 1.4;
  }

  &__category {
    padding: 4px 12px;
    font-size: 24px;
    color: $color-brand;
    background: rgba($color-brand, 0.1);
    border-radius: 32px;
    line-height: 1.2;
  }

  &__arrow {
    position: absolute;
    right: 24px;
    top: 50%;
    width: 12px;
    height: 12px;
    border-right: 2px solid $color-grey-2;
    border-bottom: 2px solid $color-grey-2;
    transform: translateY(-75%) rotate(45deg);
    transition: transform 0.2s;
  }

  &__content {
    display: none;
    border-top: 1px solid $color-border-base;
  }

  &__answer {
    padding: 20px 24px;
    font-size: 26px;
    color: $color-text-secondary;
    line-height: 1.6;
  }

  &--active {
    min-height: 120px;

    .faq-item__arrow {
      transform: translateY(-25%) rotate(-135deg);
    }

    .faq-item__content {
      display: block;
    }
  }
}
===== End of File: components\faq-section\index.scss =====


===== File: components\faq-section\index.tsx =====
// components/faq-section/index.tsx
import { useState, useCallback, memo } from 'react'
import { View, Text } from '@tarojs/components'
import type { FAQ } from '../../types'
import './index.scss'

interface FAQItemProps {
  faq: FAQ
  isOpen: boolean
  onToggle: (id: number) => void
}

const FAQItem = memo(({ faq, isOpen, onToggle }: FAQItemProps) => {
  const handleClick = useCallback(() => {
    onToggle(faq.id)
  }, [faq.id, onToggle])

  return (
    <View className={`faq-item ${isOpen ? 'faq-item--active' : ''}`}>
      <View className='faq-item__header' onClick={handleClick}>
        <View className='faq-item__main'>
          <Text className='faq-item__question'>{faq.question}</Text>
          {faq.category && (
            <Text className='faq-item__category'>{faq.category}</Text>
          )}
        </View>
        <View className='faq-item__arrow' />
      </View>

      <View className='faq-item__content'>
        <Text className='faq-item__answer'>{faq.answer}</Text>
      </View>
    </View>
  )
})

interface FAQSectionProps {
  faqs: FAQ[]
  title?: string
  className?: string
  defaultOpenIds?: number[]
  onFAQOpen?: (id: number) => void
  onFAQClose?: (id: number) => void
}

export const FAQSection = memo(({
  faqs,
  title = '常见问题',
  className = '',
  defaultOpenIds = [],
  onFAQOpen,
  onFAQClose
}: FAQSectionProps) => {
  const [openFAQs, setOpenFAQs] = useState<Set<number>>(() => 
    new Set(defaultOpenIds)
  )

  const handleToggle = useCallback((id: number) => {
    setOpenFAQs(prev => {
      const newOpenFAQs = new Set(prev)
      if (newOpenFAQs.has(id)) {
        newOpenFAQs.delete(id)
        onFAQClose?.(id)
      } else {
        newOpenFAQs.add(id)
        onFAQOpen?.(id)
      }
      return newOpenFAQs
    })
  }, [onFAQOpen, onFAQClose])

  if (!faqs?.length) return null

  return (
    <View className={`faq-section ${className}`}>
      <Text className='faq-section__title'>{title}</Text>
      <View className='faq-section__list'>
        {faqs.map(faq => (
          <FAQItem
            key={faq.id}
            faq={faq}
            isOpen={openFAQs.has(faq.id)}
            onToggle={handleToggle}
          />
        ))}
      </View>
    </View>
  )
})

export default FAQSection
===== End of File: components\faq-section\index.tsx =====


===== File: components\search-bar\index.scss =====
// components/search-bar/index.scss
@import "../../styles/custom-theme.scss";

.search-bar {
  position: relative;
  z-index: 1;
  height: 88px;
  background: $color-bg-base;
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 24px;

  &__input-wrap {
    flex: 1;
    height: 64px;
    background: $color-grey-6;
    border-radius: 32px;
    padding: 0 16px;
    display: flex;
    align-items: center;
    position: relative;

    &:active {
      background: $color-grey-5;
    }
  }

  &__icon {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
  }

  &__circle {
    position: absolute;
    width: 16px;
    height: 16px;
    border: 2px solid $color-grey-1;
    border-radius: 50%;
  }

  &__line {
    position: absolute;
    width: 10px;
    height: 2px;
    background: $color-grey-1;
    transform: rotate(45deg);
    transform-origin: 0 50%;
    margin: 14px 0 0 13px;
  }

  &__loading {
    width: 20px;
    height: 20px;
    border: 2px solid $color-grey-1;
    border-top-color: transparent;
    border-radius: 50%;
    animation: search-loading 0.8s linear infinite;
  }

  &__input {
    flex: 1;
    height: 100%;
    font-size: 28px;
    background: transparent;
    padding: 0 8px;
    color: $color-text-base;
  }

  &__placeholder {
    color: $color-text-placeholder;
  }

  &__clear {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.7;

    &:active {
      opacity: 0.5;
    }
  }

  &__clear-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: $color-grey-2;
    position: relative;

    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 16px;
      height: 2px;
      background: $color-white;
    }

    &::before {
      transform: translate(-50%, -50%) rotate(45deg);
    }

    &::after {
      transform: translate(-50%, -50%) rotate(-45deg);
    }
  }

  &__action {
    font-size: 28px;
    color: $color-text-secondary;
    padding: 0 8px;
    height: 64px;
    line-height: 64px;

    &:active {
      opacity: 0.7;
    }

    &--active {
      color: $color-brand;
      font-weight: 500;
    }

    &--disabled {
      opacity: 0.5;
      pointer-events: none;
    }
  }
}

@keyframes search-loading {
  to {
    transform: rotate(360deg);
  }
}
===== End of File: components\search-bar\index.scss =====


===== File: components\search-bar\index.tsx =====
// components/search-bar/index.tsx
import { useState, useCallback, memo } from 'react'
import { View, Input } from '@tarojs/components'
import { SearchBarProps } from '../../types'
import './index.scss'

export const SearchBar = memo(({
  value,
  placeholder = '搜索',
  loading = false,
  className = '',
  onChange,
  onSearch,
  onFocus,
  onBlur,
  onClear
}: SearchBarProps) => {
  const [isFocused, setIsFocused] = useState(false)

  const handleInput = useCallback((e: any) => {
    onChange(e.detail.value)
  }, [onChange])

  const handleClear = useCallback(() => {
    onChange('')
    onClear?.()
  }, [onChange, onClear])

  const handleSearch = useCallback(() => {
    if (!value.trim()) return
    onSearch?.(value)
  }, [value, onSearch])

  const handleFocus = useCallback(() => {
    setIsFocused(true)
    onFocus?.()
  }, [onFocus])

  const handleBlur = useCallback(() => {
    setIsFocused(false)
    onBlur?.()
  }, [onBlur])

  return (
    <View className={`search-bar ${isFocused ? 'search-bar--focused' : ''} ${loading ? 'search-bar--loading' : ''} ${className}`}>
      <View className='search-bar__input-wrap'>
        <View className='search-bar__icon'>
          {loading ? (
            <View className='search-bar__loading' />
          ) : (
            <>
              <View className='search-bar__circle' />
              <View className='search-bar__line' />
            </>
          )}
        </View>

        <Input
          className='search-bar__input'
          type='text'
          value={value}
          placeholder={placeholder}
          placeholderClass='search-bar__placeholder'
          onInput={handleInput}
          onFocus={handleFocus}
          onBlur={handleBlur}
          confirmType='search'
          onConfirm={handleSearch}
          disabled={loading}
        />

        {value && !loading && (
          <View className='search-bar__clear' onClick={handleClear}>
            <View className='search-bar__clear-icon' />
          </View>
        )}
      </View>

      <View 
        className={`search-bar__action ${value ? 'search-bar__action--active' : ''} ${loading ? 'search-bar__action--disabled' : ''}`}
        onClick={handleSearch}
      >
        搜索
      </View>
    </View>
  )
})
===== End of File: components\search-bar\index.tsx =====


===== File: components\service-card\index.scss =====
// components/service-card/index.scss
@import "../../styles/custom-theme.scss";

.service-card {
  position: relative;
  min-height: 200px;
  background: $color-bg-base;
  border-radius: 12px;
  overflow: hidden;

  &__main {
    padding: 24px;
    position: relative;
    cursor: pointer;

    &:active {
      opacity: 0.7;
    }
  }

  &__header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 16px;
  }

  &__title-wrap {
    flex: 1;
    margin-right: 16px;
  }

  &__title {
    font-size: 32px;
    font-weight: 500;
    color: $color-text-base;
    line-height: 1.4;
  }

  &__warranty {
    display: inline-block;
    margin-left: 12px;
    padding: 4px 12px;
    font-size: 24px;
    color: $color-brand;
    background: rgba($color-brand, 0.1);
    border-radius: 32px;
  }

  &__price-wrap {
    text-align: right;
  }

  &__price {
    font-size: 36px;
    font-weight: bold;
    color: $color-brand;
  }

  &__unit {
    font-size: 24px;
    color: $color-text-secondary;
  }

  &__features {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 16px;
  }

  &__feature-tag {
    padding: 8px 16px;
    font-size: 24px;
    color: $color-text-secondary;
    background: $color-grey-6;
    border-radius: 6px;
  }

  &__desc {
    font-size: 28px;
    color: $color-text-secondary;
    line-height: 1.6;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-right: 40px;
  }

  &__arrow {
    position: absolute;
    right: 24px;
    top: 50%;
    margin-top: -6px;
    width: 12px;
    height: 12px;
    border-right: 2px solid $color-grey-2;
    border-bottom: 2px solid $color-grey-2;
    transform: rotate(45deg);
    transition: transform 0.2s;
  }

  &__expand {
    display: none;
    border-top: 1px solid $color-border-base;
  }

  &__info {
    display: flex;
    gap: 16px;
    padding: 24px;
  }

  &__info-item {
    flex: 1;
    padding: 16px;
    background: $color-grey-6;
    border-radius: 8px;
    text-align: center;
  }

  &__info-label {
    display: block;
    font-size: 24px;
    color: $color-text-secondary;
    margin-bottom: 8px;
  }

  &__info-value {
    display: block;
    font-size: 28px;
    color: $color-text-base;
    font-weight: 500;
  }

  &__process {
    padding: 24px;
    border-top: 1px solid $color-border-base;
  }

  &__process-title {
    font-size: 28px;
    font-weight: 500;
    color: $color-text-base;
    margin-bottom: 24px;
  }

  &__process-steps {
    position: relative;
    display: flex;
    justify-content: space-between;

    &::before {
      content: '';
      position: absolute;
      top: 24px;
      left: 40px;
      right: 40px;
      height: 2px;
      background: $color-border-base;
    }
  }

  &__process-step {
    position: relative;
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    z-index: 1;
  }

  &__step-number {
    width: 48px;
    height: 48px;
    background: $color-brand;
    color: $color-white;
    font-size: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 16px;
  }

  &__step-title {
    font-size: 28px;
    font-weight: 500;
    color: $color-text-base;
    margin-bottom: 8px;
  }

  &__step-desc {
    font-size: 24px;
    color: $color-text-secondary;
    line-height: 1.4;
  }

  &__book {
    margin: 0 24px 24px;
    height: 88px;
    line-height: 88px;
    text-align: center;
    font-size: 32px;
    color: $color-white;
    background: $color-brand;
    border-radius: 44px;
    cursor: pointer;

    &:active {
      opacity: 0.9;
    }
  }

  &--expanded {
    min-height: 400px;

    .service-card__arrow {
      transform: rotate(-135deg);
      margin-top: 0;
    }

    .service-card__expand {
      display: block;
    }
  }

  &--loading {
    .service-card__skeleton {
      min-height: 200px;
    }

    .service-card__skeleton-line {
      height: 24px;
      background: $color-grey-6;
      border-radius: 4px;
      margin-bottom: 16px;

      &:last-child {
        margin-bottom: 0;
      }
    }
  }
}
===== End of File: components\service-card\index.scss =====


===== File: components\service-card\index.tsx =====
// components/service-card/index.tsx
import { memo, useCallback } from 'react'
import { View, Text } from '@tarojs/components'
import type { ServiceItem } from '../../types'
import './index.scss'

interface ServiceCardProps {
  service?: ServiceItem
  loading?: boolean
  expanded?: boolean
  className?: string
  onToggle?: (id: number) => void
  onBook?: (service: ServiceItem) => void
}

export const ServiceCard = memo(({
  service,
  loading = false,
  expanded = false,
  className = '',
  onToggle,
  onBook
}: ServiceCardProps) => {

  const handleToggle = useCallback(() => {
    if (service) {
      onToggle?.(service.id)
    }
  }, [service, onToggle])

  const handleBook = useCallback((e: any) => {
    e.stopPropagation()
    if (service) {
      onBook?.(service)
    }
  }, [service, onBook])

  // 加载状态
  if (loading) {
    return (
      <View className='service-card service-card--loading'>
        <View className='service-card__skeleton'>
          <View className='service-card__skeleton-line' style='width: 60%' />
          <View className='service-card__skeleton-line' style='width: 40%' />
          <View className='service-card__skeleton-line' style='width: 90%' />
        </View>
      </View>
    )
  }

  // 无数据状态
  if (!service) return null

  return (
    <View className={`service-card ${expanded ? 'service-card--expanded' : ''} ${className}`}>
      {/* 主要内容区 */}
      <View className='service-card__main' onClick={handleToggle}>
        {/* 头部信息 */}
        <View className='service-card__header'>
          <View className='service-card__title-wrap'>
            <Text className='service-card__title'>{service.title}</Text>
            {service.warranty && (
              <Text className='service-card__warranty'>{service.warranty}</Text>
            )}
          </View>

          <View className='service-card__price-wrap'>
            <Text className='service-card__price'>¥{service.price}</Text>
            <Text className='service-card__unit'>/{service.unit}</Text>
          </View>
        </View>

        {/* 特性标签 */}
        {service.features?.length > 0 && (
          <View className='service-card__features'>
            {service.features.map((feature, index) => (
              <Text
                key={`${service.id}-feature-${index}`}
                className='service-card__feature-tag'
              >
                {feature}
              </Text>
            ))}
          </View>
        )}

        {/* 描述文本 */}
        <Text className='service-card__desc'>{service.description}</Text>
        
        {/* 展开指示器 */}
        <View className='service-card__arrow' />
      </View>

      {/* 展开内容区 */}
      <View className='service-card__expand'>
        {/* 基本信息 */}
        <View className='service-card__info'>
          {service.estimatedDuration && (
            <View className='service-card__info-item'>
              <Text className='service-card__info-label'>预计工期</Text>
              <Text className='service-card__info-value'>
                {service.estimatedDuration}
              </Text>
            </View>
          )}
          
          {(service.minArea || service.maxArea) && (
            <View className='service-card__info-item'>
              <Text className='service-card__info-label'>适用面积</Text>
              <Text className='service-card__info-value'>
                {service.minArea && service.maxArea
                  ? `${service.minArea}-${service.maxArea}㎡`
                  : service.minArea
                    ? `≥${service.minArea}㎡`
                    : `≤${service.maxArea}㎡`
                }
              </Text>
            </View>
          )}
        </View>

        {/* 服务流程 */}
        {service.process?.length > 0 && (
          <View className='service-card__process'>
            <Text className='service-card__process-title'>服务流程</Text>
            <View className='service-card__process-steps'>
              {service.process.map((step, index) => (
                <View
                  key={`${service.id}-step-${index}`}
                  className='service-card__process-step'
                >
                  <View className='service-card__step-number'>{index + 1}</View>
                  <Text className='service-card__step-title'>{step.title}</Text>
                  <Text className='service-card__step-desc'>{step.description}</Text>
                </View>
              ))}
            </View>
          </View>
        )}

        {/* 预约按钮 */}
        <View className='service-card__book' onClick={handleBook}>
          立即预约
        </View>
      </View>
    </View>
  )
})

export default ServiceCard
===== End of File: components\service-card\index.tsx =====


===== File: components\tab-bar\index.scss =====
// components/tab-bar/index.scss
@import "../../styles/custom-theme.scss";

.tab-bar {
  position: relative;
  z-index: 0;
  height: 88px;
  display: flex;
  background: $color-bg-base;
  padding: 0 24px;
  border-bottom: 1px solid $color-border-base;

  &__item {
    flex: 1;
    height: 88px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;

    &:active {
      opacity: 0.7;
    }

    &--active {
      .tab-bar__text {
        color: $color-brand;
        font-weight: 500;
      }

      &::after {
        content: '';
        position: absolute;
        left: 50%;
        bottom: 0;
        width: 40px;
        height: 3px;
        background: $color-brand;
        border-radius: 2px;
        transform: translateX(-50%);
      }
    }
  }

  &__text {
    font-size: 28px;
    color: $color-text-secondary;
    transition: color 0.2s ease;
  }
}
===== End of File: components\tab-bar\index.scss =====


===== File: components\tab-bar\index.tsx =====
// components/tab-bar/index.tsx
import { memo } from 'react'
import { View, Text } from '@tarojs/components'
import './index.scss'

interface TabItem {
  title: string
  value: string | number
}

interface TabBarProps {
  tabs: TabItem[]
  activeTab: string | number
  className?: string
  onChange: (value: string | number) => void
}

export const TabBar = memo(({
  tabs,
  activeTab,
  className = '',
  onChange
}: TabBarProps) => {
  if (!tabs?.length) return null

  return (
    <View className={`tab-bar ${className}`}>
      {tabs.map(tab => (
        <View
          key={tab.value}
          className={`tab-bar__item ${activeTab === tab.value ? 'tab-bar__item--active' : ''}`}
          onClick={() => onChange(tab.value)}
        >
          <Text className='tab-bar__text'>{tab.title}</Text>
        </View>
      ))}
    </View>
  )
})

export default TabBar
===== End of File: components\tab-bar\index.tsx =====


===== File: config\index.ts =====
import type { Config } from '../types'

export const config: Config = {
    ui: {
      banner: {
        interval: 3000,
        duration: 500
      },
      cases: {
        interval: 4000,
        duration: 500,
        displayCount: 0,
        cardHeight: 0
      }
    },
    contact: {
      phone: '400-888-8888',
      wechat: 'waterproof888'
    }
}
===== End of File: config\index.ts =====


===== File: index.html =====
<!-- @ts-nocheck -->
<!DOCTYPE html>
<html>
<head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
  <meta content="width=device-width,initial-scale=1,user-scalable=no" name="viewport">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-touch-fullscreen" content="yes">
  <meta name="format-detection" content="telephone=no,address=no">
  <meta name="apple-mobile-web-app-status-bar-style" content="white">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>waterproof-app</title>
  <script><%= htmlWebpackPlugin.options.script %></script>
</head>
<body>
  <div id="app"></div>
</body>
</html>
===== End of File: index.html =====


===== File: pages\project\index.config.ts =====
// pages/project/index.config.ts
export default {
  navigationBarTitleText: '防水服务',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5',
  backgroundTextStyle: 'dark',
  navigationBarBackgroundColor: '#ffffff',
  navigationBarTextStyle: 'black'
}
===== End of File: pages\project\index.config.ts =====


===== File: pages\project\index.scss =====
// pages/project/index.scss
@import "../../styles/custom-theme.scss";

.project {
  position: relative;
  z-index: 0;
  min-height: 100vh;
  background: $color-bg;
  box-sizing: border-box;

  &__header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 176px;
    background: $color-bg-base;
    z-index: 1;
    border-bottom: 1px solid $color-border-base;

    :global {
      .search-bar {
        position: relative;
        z-index: 1;
        height: 88px;
        padding: 12px 24px;
      }

      .tab-bar {
        position: relative;
        z-index: 0;
        height: 88px;
        padding: 0 24px;
      }
    }
  }

  &__content {
    position: relative;
    z-index: 0;
    transform: translateY(176px);
    min-height: calc(100vh - 176px);
    box-sizing: border-box;
  }

  &__services {
    padding: 24px 24px 0;
  }

  &__skeleton {
    display: flex;
    flex-direction: column;
    gap: 12px;
    min-height: 600px;
  }

  &__list {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 24px;
  }

  &__empty {
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: $color-text-secondary;
    font-size: 28px;
  }

  &__faq {
    padding: 0 24px 24px;

    :global {
      .faq-section {
        min-height: 200px;
      }
    }
  }
}

.taro_page {
  padding-bottom: env(safe-area-inset-bottom);
}
===== End of File: pages\project\index.scss =====


===== File: pages\project\index.tsx =====
// pages/project/index.tsx
import { useCallback, useEffect, useRef, useState } from 'react'
import { View } from '@tarojs/components'
import Taro, { useDidShow } from '@tarojs/taro'
import { SearchBar } from '../../components/search-bar'
import { TabBar } from '../../components/tab-bar'
import { ServiceCard } from '../../components/service-card'
import { FAQSection } from '../../components/faq-section'
import { projectApi } from '../../services/project-api'
import { handleError } from '../../utils/error'
import type { ServiceItem, FAQ, ServiceType } from '../../types'
import './index.scss'

const TABS = [
  { title: '全部', value: 'all' },
  { title: '家庭防水', value: 'home' },
  { title: '室外防水', value: 'outdoor' },
  { title: '工业防水', value: 'industrial' }
]

export default function ProjectPage() {
  // 页面状态
  const [services, setServices] = useState<ServiceItem[]>([])
  const [faqs, setFaqs] = useState<FAQ[]>([])
  const [loading, setLoading] = useState(false)
  
  // UI状态
  const [currentTab, setCurrentTab] = useState<ServiceType>('all')
  const [searchValue, setSearchValue] = useState('')
  const [expandedId, setExpandedId] = useState<number | null>(null)

  // 防抖定时器
  const searchTimer = useRef<NodeJS.Timeout>()

  // 加载服务列表
  const loadServices = useCallback(async () => {
    try {
      setLoading(true)
      const keyword = searchValue.trim()
      
      const response = await (keyword 
        ? projectApi.searchServices(keyword, currentTab)
        : projectApi.getServicesByType(currentTab)
      )

      setServices(response.data)
    } catch (err) {
      Taro.showToast({
        title: handleError(err),
        icon: 'none'
      })
      setServices([])
    } finally {
      setLoading(false)
    }
  }, [currentTab, searchValue])

  // 加载FAQ
  const loadFaqs = useCallback(async () => {
    try {
      const response = await projectApi.getFaqs()
      setFaqs(response.data)
    } catch (err) {
      console.error('加载FAQ失败:', err)
    }
  }, [])

  // 搜索变化处理
  const handleSearchChange = useCallback((value: string) => {
    setSearchValue(value)
    
    if (searchTimer.current) {
      clearTimeout(searchTimer.current)
    }

    searchTimer.current = setTimeout(() => {
      loadServices()
    }, 300)
  }, [loadServices])

  // 搜索按钮点击
  const handleSearch = useCallback(() => {
    if (searchTimer.current) {
      clearTimeout(searchTimer.current)
    }
    loadServices()
  }, [loadServices])

  // Tab切换处理
  const handleTabChange = useCallback((value: string | number) => {
    setCurrentTab(value as ServiceType)
    setSearchValue('') // 清空搜索内容
    setExpandedId(null) // 重置展开状态
    
    // 切换分类立即加载
    if (searchTimer.current) {
      clearTimeout(searchTimer.current)
    }
    loadServices()
  }, [loadServices])

  // 展开/收起处理
  const handleToggle = useCallback((id: number) => {
    setExpandedId(prev => prev === id ? null : id)
  }, [])

  // 预约处理
  const handleBook = useCallback(async (service: ServiceItem) => {
    try {
      await Taro.setStorage({
        key: 'selected_service',
        data: service
      })
      await Taro.navigateTo({
        url: '/pages/contact/index'
      })
    } catch {
      Taro.showToast({
        title: '预约失败，请重试',
        icon: 'none'
      })
    }
  }, [])

  // 初始化加载
  useEffect(() => {
    loadServices()
    loadFaqs()
  }, [loadServices, loadFaqs])

  // 处理返回刷新
  useDidShow(() => {
    loadServices()
  })

  // 清理定时器
  useEffect(() => {
    return () => {
      if (searchTimer.current) {
        clearTimeout(searchTimer.current)
      }
    }
  }, [])

  return (
    <View className='project'>
      <View className='project__header'>
        <SearchBar
          value={searchValue}
          placeholder={`搜索${currentTab === 'all' ? '' : TABS.find(tab => tab.value === currentTab)?.title}服务`}
          loading={loading}
          onChange={handleSearchChange}
          onSearch={handleSearch}
          onClear={() => handleSearchChange('')}
        />
        <TabBar
          tabs={TABS}
          activeTab={currentTab}
          onChange={handleTabChange}
        />
      </View>

      <View className='project__content'>
        <View className='project__services'>
          {loading ? (
            <View className='project__skeleton'>
              {Array(3).fill(null).map((_, index) => (
                <ServiceCard key={index} loading />
              ))}
            </View>
          ) : services.length ? (
            <View className='project__list'>
              {services.map(service => (
                <ServiceCard
                  key={service.id}
                  service={service}
                  expanded={expandedId === service.id}
                  onToggle={handleToggle}
                  onBook={handleBook}
                />
              ))}
            </View>
          ) : (
            <View className='project__empty'>
              {searchValue ? '未找到相关服务' : '暂无服务内容'}
            </View>
          )}
        </View>

        {faqs.length > 0 && (
          <View className='project__faq'>
            <FAQSection faqs={faqs} />
          </View>
        )}
      </View>
    </View>
  )
}
===== End of File: pages\project\index.tsx =====


===== File: services\project-api.ts =====
// services/project-api.ts
import type { ServiceType, ServiceItem, FAQ, ApiResponse, SearchOptions } from '../types'
import { AppError } from '../utils/error'
import { mockServices, mockFaqs } from './project-mock-data'

/**
 * 模拟异步请求
 */
const mockRequest = async <T>(data: T): Promise<ApiResponse<T>> => {
  await new Promise(resolve => setTimeout(resolve, 500))
  return {
    code: 0,
    message: 'success',
    data
  }
}

/**
 * 搜索相关度评分
 */
const calculateRelevanceScore = (service: ServiceItem, keyword: string): number => {
  let score = 0
  const lowerKeyword = keyword.toLowerCase()

  // 标题匹配权重最高
  if (service.title.toLowerCase().includes(lowerKeyword)) {
    score += 10
  }
  
  // 描述匹配次之
  if (service.description.toLowerCase().includes(lowerKeyword)) {
    score += 5
  }
  
  // 特性匹配
  service.features?.forEach(feature => {
    if (feature.toLowerCase().includes(lowerKeyword)) {
      score += 3
    }
  })

  // 工期和面积信息匹配
  if (service.estimatedDuration?.toLowerCase().includes(lowerKeyword)) {
    score += 2
  }

  return score
}

export const projectApi = {
  /**
   * 获取服务列表
   */
  async getServicesByType(type: ServiceType): Promise<ApiResponse<ServiceItem[]>> {
    try {
      const filtered = type === 'all' 
        ? mockServices 
        : mockServices.filter(service => service.type === type)

      return mockRequest(filtered)
    } catch (error) {
      throw new AppError(500, '获取服务列表失败')
    }
  },

  /**
   * 搜索服务
   */
  async searchServices(
    keyword: string,
    type: ServiceType = 'all',
    options: SearchOptions = {}
  ): Promise<ApiResponse<ServiceItem[]>> {
    try {
      // 预处理关键词
      const processedKeyword = keyword.trim().toLowerCase()
      
      // 空关键词时返回分类列表
      if (!processedKeyword) {
        return this.getServicesByType(type)
      }

      // 先按类型过滤
      let filtered = type === 'all' 
        ? mockServices 
        : mockServices.filter(service => service.type === type)

      // 搜索过滤
      filtered = filtered.filter(service => {
        const searchFields = [
          service.title,
          service.description,
          ...(service.features || []),
          service.warranty || '',
          service.estimatedDuration || '',
        ].map(field => field.toLowerCase())

        return searchFields.some(field => field.includes(processedKeyword))
      })

      // 计算相关度得分并排序
      if (options.sortBy === 'relevance') {
        filtered.sort((a, b) => {
          const scoreA = calculateRelevanceScore(a, processedKeyword)
          const scoreB = calculateRelevanceScore(b, processedKeyword)
          return scoreB - scoreA
        })
      }

      // 价格筛选
      if (options.minPrice !== undefined || options.maxPrice !== undefined) {
        filtered = filtered.filter(service => {
          const price = service.price
          return (options.minPrice === undefined || price >= options.minPrice) &&
                 (options.maxPrice === undefined || price <= options.maxPrice)
        })
      }

      // 按价格排序
      if (options.sortBy === 'price') {
        filtered.sort((a, b) => 
          options.sortOrder === 'desc' ? b.price - a.price : a.price - b.price
        )
      }

      return mockRequest(filtered)
    } catch (error) {
      throw new AppError(500, '搜索服务失败')
    }
  },

  /**
   * 获取服务详情
   */
  async getServiceDetail(id: number): Promise<ApiResponse<ServiceItem>> {
    try {
      const service = mockServices.find(s => s.id === id)
      if (!service) {
        throw new AppError(404, '服务不存在')
      }
      return mockRequest(service)
    } catch (error) {
      if (error instanceof AppError) {
        throw error
      }
      throw new AppError(500, '获取服务详情失败')
    }
  },

  /**
   * 获取FAQ列表
   */
  async getFaqs(): Promise<ApiResponse<FAQ[]>> {
    try {
      return mockRequest(mockFaqs)
    } catch (error) {
      throw new AppError(500, '获取FAQ列表失败')
    }
  }
}
===== End of File: services\project-api.ts =====


===== File: services\project-mock-data.ts =====
// services/project-mock-data.ts
import type { ServiceItem, FAQ } from '../types'

export const mockServices: ServiceItem[] = [
  {
    id: 1,
    title: '卫生间防水',
    price: 100,
    unit: '平米起',
    type: 'home',
    description: '专业卫生间防水施工，解决渗漏问题',
    features: ['耐候耐磨', '持久防护', '无缝施工'],
    process: [
      { step: 1, title: '问题诊断', description: '专业检测漏水原因' },
      { step: 2, title: '制定方案', description: '根据具体情况定制解决方案' },
      { step: 3, title: '规范施工', description: '按标准流程进行施工' },
      { step: 4, title: '成效检验', description: '严格验收确保效果' }
    ],
    estimatedDuration: '1-2天',
    minArea: 1,
    maxArea: 20,
    warranty: '十年质保'
  },
  {
    id: 2,
    title: '外墙防水',
    price: 150,
    unit: '平米起',
    type: 'outdoor',
    description: '全方位外墙防水，根治渗漏难题',
    features: ['高空作业', '全面防护', '防紫外线'],
    process: [
      { step: 1, title: '现场勘察', description: '专业评估渗漏范围' },
      { step: 2, title: '方案设计', description: '定制专业解决方案' },
      { step: 3, title: '精细施工', description: '标准化施工流程' },
      { step: 4, title: '质量验收', description: '多重检验标准' }
    ],
    estimatedDuration: '3-5天',
    minArea: 50,
    maxArea: 1000,
    warranty: '五年质保'
  },
  {
    id: 3,
    title: '地下室防水',
    price: 200,
    unit: '平米起',
    type: 'industrial',
    description: '专业地下室防水工程，彻底解决渗水问题',
    features: ['防积水', '耐腐蚀', '抗压防渗'],
    process: [
      { step: 1, title: '渗漏检测', description: '全面排查隐患' },
      { step: 2, title: '工程设计', description: '系统解决方案' },
      { step: 3, title: '专业施工', description: '工艺流程标准化' },
      { step: 4, title: '竣工验收', description: '确保施工质量' }
    ],
    estimatedDuration: '5-7天',
    minArea: 100,
    maxArea: 2000,
    warranty: '八年质保'
  }
]

export const mockFaqs: FAQ[] = [
  {
    id: 1,
    question: '防水工程需要多久才能完工？',
    answer: '工期取决于面积和施工难度，一般小面积(20㎡内)1-2天，大面积3-7天。',
    category: '施工周期'
  },
  {
    id: 2,
    question: '防水材料有哪些品牌可以选择？',
    answer: '我们使用国际知名品牌防水材料，包括东方雨虹、科顺等，可根据需求选择。',
    category: '材料选择'
  },
  {
    id: 3,
    question: '施工后多久可以正常使用？',
    answer: '一般建议24-48小时后可以正常使用，具体时间视材料和天气情况而定。',
    category: '使用说明'
  },
  {
    id: 4,
    question: '防水工程的质保期是多久？',
    answer: '根据不同项目提供5-10年不等的质保服务，具体以合同约定为准。',
    category: '售后保障'
  }
]
===== End of File: services\project-mock-data.ts =====


===== File: styles\custom-theme.scss =====
/* custom-theme.scss */

/* The Color of O2Team Brand */
$color-brand: #2563eb;                      // 品牌主色
$color-brand-light: #60a5fa;                // 品牌色-浅色
$color-brand-dark: #1d4ed8;                 // 品牌色-深色
$color-brand-disabled: #bfdbfe;             // 品牌色-禁用

/* Color */
$color-success: #22c55e;                    // 成功色
$color-error: #ef4444;                      // 错误色
$color-warning: #f59e0b;                    // 警告色
$color-info: #78A4FA;

/* Color Palette */
$color-black-0: #000;
$color-black-1: #333;
$color-black-2: #7F7F7F;
$color-black-3: #B2B2B2;

$color-grey-0: #333;
$color-grey-1: #666;
$color-grey-2: #999;
$color-grey-3: #CCC;
$color-grey-4: #E5E5E5;
$color-grey-5: #F0F0F0;
$color-grey-6: #F7F7F7;

$color-white: #FFF;

/* Text Color */
$color-text-base: #1e293b;                  // 基础文字色
$color-text-base-inverse: #ffffff;          // 反色文字色
$color-text-secondary: #475569;             // 次要文字色
$color-text-placeholder: #94a3b8;           // 占位文字色
$color-text-disabled: #cbd5e1;              // 禁用文字色
$color-text-title: #2C405A;
$color-text-paragraph: #3F536E;

/* Link */
$color-link: #6190E8;
$color-link-hover: #79A1EB;
$color-link-active: #4F7DE2;
$color-link-disabled: #BFBFBF;

/* 背景色 */
$color-bg: #f8fafc;                         // 背景色
$color-bg-base: #ffffff;                    // 组件背景色
$color-bg-light: #f1f5f9;                   // 浅背景色
$color-bg-dark: #e2e8f0;                    // 深背景色
$color-bg-grey: #F7F7F7;

/* 边框颜色 */
$color-border-base: #e2e8f0;                // 基础边框色
$color-border-split: #edf2f7;               // 分割线 (原tint 20%)
$color-border-light: #f1f5f9;               // 浅边框色
$color-border-dark: #cbd5e1;                // 深边框色
$color-border-lighter: #f7fafc;             // 更浅边框色 (原tint 50%)
$color-border-lightest: #fcfdfe;            // 最浅边框色 (原tint 80%)
$color-border-grey: #CCC;

/* 图标颜色 */
$color-icon-base: #CCC;

/* 功能色相关 */
// 成功色
$color-success-light: #86efac;              // 成功色-浅色
$color-success-dark: #16a34a;               // 成功色-深色
$color-success-disabled: #bbf7d0;           // 成功色-禁用

// 警告色
$color-warning-light: #fcd34d;              // 警告色-浅色
$color-warning-dark: #d97706;               // 警告色-深色
$color-warning-disabled: #fde68a;           // 警告色-禁用

// 错误色
$color-error-light: #fca5a5;                // 错误色-浅色
$color-error-dark: #dc2626;                 // 错误色-深色
$color-error-disabled: #fecaca;             // 错误色-禁用

/**
 * 引入Taro UI默认样式
 */
@import "~taro-ui/dist/style/index.scss";
===== End of File: styles\custom-theme.scss =====


===== File: types\index.ts =====
// types/index.ts

// API 基础类型
export interface ApiResponse<T> {
  code: number
  message: string
  data: T
}

// 分页相关
export interface PaginationParams {
  page: number
  pageSize: number
}

export interface PaginatedResponse<T> extends ApiResponse<T> {
  pagination: {
    total: number
    totalPages: number
    currentPage: number
    pageSize: number
  }
}

//主页

// Banner相关
export interface Banner {
  id: number
  title: string
  subtitle: string
  imageUrl: string
}

// 服务案例相关
export interface ServiceCase {
  id: number
  title: string
  description: string
  imageUrl: string
  content?: string
  type: string
  date: string
  views: number
}

// 服务优势相关
export interface ServiceAdvantage {
  id: number
  icon: string
  value: string
  label: string
}

// 预约表单相关
export interface BookingForm {
  name: string
  phone: string
  address?: string
  remark?: string
}

// 服务类型
export type ServiceType = 'all' | 'home' | 'outdoor' | 'industrial'

export interface ProcessStep {
  step: number
  title: string
  description: string
  status?: 'pending' | 'processing' | 'completed' | 'error'
}

export interface ServiceItem {
  id: number
  title: string
  price: number
  unit: string
  type: ServiceType
  description: string
  features: string[]
  process: ProcessStep[]
  estimatedDuration?: string
  minArea?: number
  maxArea?: number
  warranty?: string
  imageUrl?: string
  updatedAt?: string
  createdAt?: string
}

// 搜索相关
export interface SearchOptions {
  sortBy?: 'relevance' | 'price' | 'createdAt'
  sortOrder?: 'asc' | 'desc'
  minPrice?: number
  maxPrice?: number
  minArea?: number
  maxArea?: number
}

// FAQ 相关
export interface FAQ {
  id: number
  question: string
  answer: string
  category: string
  order?: number
  isHot?: boolean
}

// 组件 Props 类型
export interface SearchBarProps {
  value: string
  placeholder?: string
  className?: string
  loading?: boolean
  delay?: number
  maxLength?: number
  showAction?: boolean
  actionText?: string
  onChange: (value: string) => void
  onSearch?: (value: string) => void
  onFocus?: () => void
  onBlur?: () => void
  onClear?: () => void
}

export interface ServiceCardProps {
  service: ServiceItem
  expanded?: boolean
  loading?: boolean
  className?: string
  showAction?: boolean
  onToggle?: (id: number) => void
  onBook?: (service: ServiceItem) => void
}

export interface FAQSectionProps {
  faqs: FAQ[]
  title?: string
  className?: string
  emptyText?: string
  onFAQClick?: (faq: FAQ) => void
}

// 状态管理类型
export interface ProjectPageState {
  loading: boolean
  services: ServiceItem[]
  faqs: FAQ[]
  searchValue: string
  currentTab: number
  expandedService: number | null
  error: string | null
  initialized: boolean
  searchHistory: string[]
  filter: SearchOptions
}

// 通用组件类型
export interface LoadingProps {
  size?: 'small' | 'normal' | 'large'
  color?: string
  className?: string
  text?: string
}

export interface EmptyProps {
  text?: string
  image?: string
  className?: string
  children?: React.ReactNode
}

export interface ErrorProps {
  text?: string
  code?: number
  className?: string
  onRetry?: () => void
}

// 错误相关
export interface AppErrorType extends Error {
  code: number
  details?: any
}

// Tab 相关
export interface TabItem {
  title: string
  value: ServiceType
  badge?: number | string
}

export interface TabsProps {
  items: TabItem[]
  value: string | number
  className?: string
  onChange: (value: string | number) => void
}

// 过滤器相关
export interface FilterOption {
  label: string
  value: string | number
  disabled?: boolean
}

export interface FilterGroupProps {
  title: string
  options: FilterOption[]
  value: string | number | (string | number)[]
  multiple?: boolean
  className?: string
  onChange: (value: string | number | (string | number)[]) => void
}

// 业务类型
export interface ServiceBooking {
  id: number
  serviceId: number
  userId: string
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed'
  area?: number
  address?: string
  contactName: string
  contactPhone: string
  appointmentTime?: string
  remark?: string
  createdAt: string
}

export interface ServiceComment {
  id: number
  serviceId: number
  userId: string
  rating: number
  content: string
  images?: string[]
  reply?: string
  createdAt: string
}

// 配置类型
export interface ProjectConfig {
  searchDebounceDelay: number
  maxSearchHistory: number
  defaultPageSize: number
  imageBaseUrl: string
  priceUnit: string
  areaUnit: string
}
===== End of File: types\index.ts =====


===== File: utils\error.ts =====
// utils/error.ts

// 自定义应用错误类
export class AppError extends Error {
  constructor(
    public code: number,
    message: string
  ) {
    super(message)
    this.name = 'AppError'
  }
}

// 类型保护：判断是否为 AppError
export function isAppError(error: unknown): error is AppError {
  return error instanceof AppError
}

// 通用错误处理函数
export function handleError(error: unknown): string {
  // 如果是应用自定义错误
  if (isAppError(error)) {
    return error.message
  }

  // 如果是标准 Error 对象
  if (error instanceof Error) {
    return error.message
  }

  // 其他未知错误类型
  return '操作失败，请稍后重试'
}

// 业务错误码映射
export const ErrorCodeMap: Record<number, string> = {
  400: '请求参数错误',
  401: '未登录或登录已过期',
  403: '没有操作权限',
  404: '请求的资源不存在',
  500: '服务器内部错误',
  502: '网关错误',
  503: '服务不可用',
  504: '网关超时'
}

// HTTP 错误处理
export function handleHttpError(code: number): string {
  return ErrorCodeMap[code] || '网络请求失败，请稍后重试'
}

// 表单错误处理
export function handleFormError(error: unknown): { 
  [key: string]: string 
} {
  if (isAppError(error)) {
    try {
      // 尝试解析错误信息是否为 JSON 格式的字段错误
      const fieldsError = JSON.parse(error.message)
      if (typeof fieldsError === 'object') {
        return fieldsError
      }
    } catch {
      // 解析失败则返回通用错误
      return { _error: error.message }
    }
  }
  return { _error: handleError(error) }
}

// 网络错误判断
export function isNetworkError(error: unknown): boolean {
  if (error instanceof Error) {
    return error.message.toLowerCase().includes('network') || 
           error.message.toLowerCase().includes('timeout') ||
           error.message.toLowerCase().includes('connection')
  }
  return false
}

// 超时错误判断
export function isTimeoutError(error: unknown): boolean {
  if (error instanceof Error) {
    return error.message.toLowerCase().includes('timeout')
  }
  return false
}

// 创建业务错误
export function createBusinessError(code: number, message: string): AppError {
  return new AppError(code, message)
}

// 包装异步错误处理
export async function wrapAsyncError<T>(
  promise: Promise<T>,
  errorMessage?: string
): Promise<T> {
  try {
    return await promise
  } catch (error) {
    throw new AppError(
      isAppError(error) ? error.code : 500,
      errorMessage || handleError(error)
    )
  }
}

// 错误提示格式化
export function formatErrorMessage(error: unknown): string {
  if (isAppError(error)) {
    const code = error.code
    const message = error.message
    return `${message}${code ? ` (${code})` : ''}`
  }
  return handleError(error)
}
===== End of File: utils\error.ts =====

